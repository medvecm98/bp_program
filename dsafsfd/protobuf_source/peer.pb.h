// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_peer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_peer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "newspaper_entry.pb.h"
#include "ip_map.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_peer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_peer_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_peer_2eproto;
namespace np2ps {
class Peer;
struct PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
}  // namespace np2ps
PROTOBUF_NAMESPACE_OPEN
template<> ::np2ps::Peer* Arena::CreateMaybeMessage<::np2ps::Peer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace np2ps {

// ===================================================================

class Peer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.Peer) */ {
 public:
  inline Peer() : Peer(nullptr) {}
  ~Peer() override;
  explicit PROTOBUF_CONSTEXPR Peer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Peer(const Peer& from);
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Peer& operator=(Peer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Peer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(Peer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Peer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Peer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Peer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Peer& from) {
    Peer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.Peer";
  }
  protected:
  explicit Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewsFieldNumber = 3,
    kNameFieldNumber = 2,
    kIpMapFieldNumber = 4,
    kPublicIdentifierFieldNumber = 1,
  };
  // repeated .np2ps.NewspaperEntry news = 3;
  int news_size() const;
  private:
  int _internal_news_size() const;
  public:
  void clear_news();
  ::np2ps::NewspaperEntry* mutable_news(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::NewspaperEntry >*
      mutable_news();
  private:
  const ::np2ps::NewspaperEntry& _internal_news(int index) const;
  ::np2ps::NewspaperEntry* _internal_add_news();
  public:
  const ::np2ps::NewspaperEntry& news(int index) const;
  ::np2ps::NewspaperEntry* add_news();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::NewspaperEntry >&
      news() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .np2ps.IpMap ip_map = 4;
  bool has_ip_map() const;
  private:
  bool _internal_has_ip_map() const;
  public:
  void clear_ip_map();
  const ::np2ps::IpMap& ip_map() const;
  PROTOBUF_NODISCARD ::np2ps::IpMap* release_ip_map();
  ::np2ps::IpMap* mutable_ip_map();
  void set_allocated_ip_map(::np2ps::IpMap* ip_map);
  private:
  const ::np2ps::IpMap& _internal_ip_map() const;
  ::np2ps::IpMap* _internal_mutable_ip_map();
  public:
  void unsafe_arena_set_allocated_ip_map(
      ::np2ps::IpMap* ip_map);
  ::np2ps::IpMap* unsafe_arena_release_ip_map();

  // uint64 public_identifier = 1;
  void clear_public_identifier();
  uint64_t public_identifier() const;
  void set_public_identifier(uint64_t value);
  private:
  uint64_t _internal_public_identifier() const;
  void _internal_set_public_identifier(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.Peer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::NewspaperEntry > news_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::np2ps::IpMap* ip_map_;
    uint64_t public_identifier_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_peer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Peer

// uint64 public_identifier = 1;
inline void Peer::clear_public_identifier() {
  _impl_.public_identifier_ = uint64_t{0u};
}
inline uint64_t Peer::_internal_public_identifier() const {
  return _impl_.public_identifier_;
}
inline uint64_t Peer::public_identifier() const {
  // @@protoc_insertion_point(field_get:np2ps.Peer.public_identifier)
  return _internal_public_identifier();
}
inline void Peer::_internal_set_public_identifier(uint64_t value) {
  
  _impl_.public_identifier_ = value;
}
inline void Peer::set_public_identifier(uint64_t value) {
  _internal_set_public_identifier(value);
  // @@protoc_insertion_point(field_set:np2ps.Peer.public_identifier)
}

// string name = 2;
inline void Peer::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Peer::name() const {
  // @@protoc_insertion_point(field_get:np2ps.Peer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Peer::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.Peer.name)
}
inline std::string* Peer::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:np2ps.Peer.name)
  return _s;
}
inline const std::string& Peer::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Peer::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Peer::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Peer::release_name() {
  // @@protoc_insertion_point(field_release:np2ps.Peer.name)
  return _impl_.name_.Release();
}
inline void Peer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.Peer.name)
}

// .np2ps.IpMap ip_map = 4;
inline bool Peer::_internal_has_ip_map() const {
  return this != internal_default_instance() && _impl_.ip_map_ != nullptr;
}
inline bool Peer::has_ip_map() const {
  return _internal_has_ip_map();
}
inline const ::np2ps::IpMap& Peer::_internal_ip_map() const {
  const ::np2ps::IpMap* p = _impl_.ip_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::np2ps::IpMap&>(
      ::np2ps::_IpMap_default_instance_);
}
inline const ::np2ps::IpMap& Peer::ip_map() const {
  // @@protoc_insertion_point(field_get:np2ps.Peer.ip_map)
  return _internal_ip_map();
}
inline void Peer::unsafe_arena_set_allocated_ip_map(
    ::np2ps::IpMap* ip_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ip_map_);
  }
  _impl_.ip_map_ = ip_map;
  if (ip_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Peer.ip_map)
}
inline ::np2ps::IpMap* Peer::release_ip_map() {
  
  ::np2ps::IpMap* temp = _impl_.ip_map_;
  _impl_.ip_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::np2ps::IpMap* Peer::unsafe_arena_release_ip_map() {
  // @@protoc_insertion_point(field_release:np2ps.Peer.ip_map)
  
  ::np2ps::IpMap* temp = _impl_.ip_map_;
  _impl_.ip_map_ = nullptr;
  return temp;
}
inline ::np2ps::IpMap* Peer::_internal_mutable_ip_map() {
  
  if (_impl_.ip_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::np2ps::IpMap>(GetArenaForAllocation());
    _impl_.ip_map_ = p;
  }
  return _impl_.ip_map_;
}
inline ::np2ps::IpMap* Peer::mutable_ip_map() {
  ::np2ps::IpMap* _msg = _internal_mutable_ip_map();
  // @@protoc_insertion_point(field_mutable:np2ps.Peer.ip_map)
  return _msg;
}
inline void Peer::set_allocated_ip_map(::np2ps::IpMap* ip_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ip_map_);
  }
  if (ip_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ip_map));
    if (message_arena != submessage_arena) {
      ip_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip_map, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.ip_map_ = ip_map;
  // @@protoc_insertion_point(field_set_allocated:np2ps.Peer.ip_map)
}

// repeated .np2ps.NewspaperEntry news = 3;
inline int Peer::_internal_news_size() const {
  return _impl_.news_.size();
}
inline int Peer::news_size() const {
  return _internal_news_size();
}
inline ::np2ps::NewspaperEntry* Peer::mutable_news(int index) {
  // @@protoc_insertion_point(field_mutable:np2ps.Peer.news)
  return _impl_.news_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::NewspaperEntry >*
Peer::mutable_news() {
  // @@protoc_insertion_point(field_mutable_list:np2ps.Peer.news)
  return &_impl_.news_;
}
inline const ::np2ps::NewspaperEntry& Peer::_internal_news(int index) const {
  return _impl_.news_.Get(index);
}
inline const ::np2ps::NewspaperEntry& Peer::news(int index) const {
  // @@protoc_insertion_point(field_get:np2ps.Peer.news)
  return _internal_news(index);
}
inline ::np2ps::NewspaperEntry* Peer::_internal_add_news() {
  return _impl_.news_.Add();
}
inline ::np2ps::NewspaperEntry* Peer::add_news() {
  ::np2ps::NewspaperEntry* _add = _internal_add_news();
  // @@protoc_insertion_point(field_add:np2ps.Peer.news)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::NewspaperEntry >&
Peer::news() const {
  // @@protoc_insertion_point(field_list:np2ps.Peer.news)
  return _impl_.news_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace np2ps

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_peer_2eproto
