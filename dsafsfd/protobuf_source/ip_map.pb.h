// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ip_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ip_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ip_5fmap_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ip_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ip_5fmap_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ip_5fmap_2eproto;
namespace np2ps {
class IpMap;
struct IpMapDefaultTypeInternal;
extern IpMapDefaultTypeInternal _IpMap_default_instance_;
class IpWrapper;
struct IpWrapperDefaultTypeInternal;
extern IpWrapperDefaultTypeInternal _IpWrapper_default_instance_;
}  // namespace np2ps
PROTOBUF_NAMESPACE_OPEN
template<> ::np2ps::IpMap* Arena::CreateMaybeMessage<::np2ps::IpMap>(Arena*);
template<> ::np2ps::IpWrapper* Arena::CreateMaybeMessage<::np2ps::IpWrapper>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace np2ps {

// ===================================================================

class IpWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.IpWrapper) */ {
 public:
  inline IpWrapper() : IpWrapper(nullptr) {}
  ~IpWrapper() override;
  explicit PROTOBUF_CONSTEXPR IpWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IpWrapper(const IpWrapper& from);
  IpWrapper(IpWrapper&& from) noexcept
    : IpWrapper() {
    *this = ::std::move(from);
  }

  inline IpWrapper& operator=(const IpWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpWrapper& operator=(IpWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IpWrapper& default_instance() {
    return *internal_default_instance();
  }
  static inline const IpWrapper* internal_default_instance() {
    return reinterpret_cast<const IpWrapper*>(
               &_IpWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IpWrapper& a, IpWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(IpWrapper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IpWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IpWrapper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IpWrapper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IpWrapper& from) {
    IpWrapper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpWrapper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.IpWrapper";
  }
  protected:
  explicit IpWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEaxKeyFieldNumber = 30,
    kRsaPublicKeyFieldNumber = 40,
    kPublicIDFieldNumber = 5,
    kIpv4FieldNumber = 10,
    kPortFieldNumber = 20,
    kRelayFlagFieldNumber = 25,
  };
  // optional string eax_key = 30;
  bool has_eax_key() const;
  private:
  bool _internal_has_eax_key() const;
  public:
  void clear_eax_key();
  const std::string& eax_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eax_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eax_key();
  PROTOBUF_NODISCARD std::string* release_eax_key();
  void set_allocated_eax_key(std::string* eax_key);
  private:
  const std::string& _internal_eax_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eax_key(const std::string& value);
  std::string* _internal_mutable_eax_key();
  public:

  // optional string rsa_public_key = 40;
  bool has_rsa_public_key() const;
  private:
  bool _internal_has_rsa_public_key() const;
  public:
  void clear_rsa_public_key();
  const std::string& rsa_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rsa_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rsa_public_key();
  PROTOBUF_NODISCARD std::string* release_rsa_public_key();
  void set_allocated_rsa_public_key(std::string* rsa_public_key);
  private:
  const std::string& _internal_rsa_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rsa_public_key(const std::string& value);
  std::string* _internal_mutable_rsa_public_key();
  public:

  // uint64 publicID = 5;
  void clear_publicid();
  uint64_t publicid() const;
  void set_publicid(uint64_t value);
  private:
  uint64_t _internal_publicid() const;
  void _internal_set_publicid(uint64_t value);
  public:

  // uint32 ipv4 = 10;
  void clear_ipv4();
  uint32_t ipv4() const;
  void set_ipv4(uint32_t value);
  private:
  uint32_t _internal_ipv4() const;
  void _internal_set_ipv4(uint32_t value);
  public:

  // uint32 port = 20;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // bool relay_flag = 25;
  void clear_relay_flag();
  bool relay_flag() const;
  void set_relay_flag(bool value);
  private:
  bool _internal_relay_flag() const;
  void _internal_set_relay_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.IpWrapper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eax_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsa_public_key_;
    uint64_t publicid_;
    uint32_t ipv4_;
    uint32_t port_;
    bool relay_flag_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ip_5fmap_2eproto;
};
// -------------------------------------------------------------------

class IpMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.IpMap) */ {
 public:
  inline IpMap() : IpMap(nullptr) {}
  ~IpMap() override;
  explicit PROTOBUF_CONSTEXPR IpMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IpMap(const IpMap& from);
  IpMap(IpMap&& from) noexcept
    : IpMap() {
    *this = ::std::move(from);
  }

  inline IpMap& operator=(const IpMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpMap& operator=(IpMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IpMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const IpMap* internal_default_instance() {
    return reinterpret_cast<const IpMap*>(
               &_IpMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IpMap& a, IpMap& b) {
    a.Swap(&b);
  }
  inline void Swap(IpMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IpMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IpMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IpMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IpMap& from) {
    IpMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.IpMap";
  }
  protected:
  explicit IpMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWrapperMapFieldNumber = 40,
    kRsaPrivateKeyFieldNumber = 30,
    kMyIPFieldNumber = 10,
    kMyPublicIDFieldNumber = 20,
  };
  // repeated .np2ps.IpWrapper wrapper_map = 40;
  int wrapper_map_size() const;
  private:
  int _internal_wrapper_map_size() const;
  public:
  void clear_wrapper_map();
  ::np2ps::IpWrapper* mutable_wrapper_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::IpWrapper >*
      mutable_wrapper_map();
  private:
  const ::np2ps::IpWrapper& _internal_wrapper_map(int index) const;
  ::np2ps::IpWrapper* _internal_add_wrapper_map();
  public:
  const ::np2ps::IpWrapper& wrapper_map(int index) const;
  ::np2ps::IpWrapper* add_wrapper_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::IpWrapper >&
      wrapper_map() const;

  // optional string rsa_private_key = 30;
  bool has_rsa_private_key() const;
  private:
  bool _internal_has_rsa_private_key() const;
  public:
  void clear_rsa_private_key();
  const std::string& rsa_private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rsa_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rsa_private_key();
  PROTOBUF_NODISCARD std::string* release_rsa_private_key();
  void set_allocated_rsa_private_key(std::string* rsa_private_key);
  private:
  const std::string& _internal_rsa_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rsa_private_key(const std::string& value);
  std::string* _internal_mutable_rsa_private_key();
  public:

  // .np2ps.IpWrapper my_IP = 10;
  bool has_my_ip() const;
  private:
  bool _internal_has_my_ip() const;
  public:
  void clear_my_ip();
  const ::np2ps::IpWrapper& my_ip() const;
  PROTOBUF_NODISCARD ::np2ps::IpWrapper* release_my_ip();
  ::np2ps::IpWrapper* mutable_my_ip();
  void set_allocated_my_ip(::np2ps::IpWrapper* my_ip);
  private:
  const ::np2ps::IpWrapper& _internal_my_ip() const;
  ::np2ps::IpWrapper* _internal_mutable_my_ip();
  public:
  void unsafe_arena_set_allocated_my_ip(
      ::np2ps::IpWrapper* my_ip);
  ::np2ps::IpWrapper* unsafe_arena_release_my_ip();

  // uint64 my_public_ID = 20;
  void clear_my_public_id();
  uint64_t my_public_id() const;
  void set_my_public_id(uint64_t value);
  private:
  uint64_t _internal_my_public_id() const;
  void _internal_set_my_public_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.IpMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::IpWrapper > wrapper_map_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsa_private_key_;
    ::np2ps::IpWrapper* my_ip_;
    uint64_t my_public_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ip_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IpWrapper

// uint64 publicID = 5;
inline void IpWrapper::clear_publicid() {
  _impl_.publicid_ = uint64_t{0u};
}
inline uint64_t IpWrapper::_internal_publicid() const {
  return _impl_.publicid_;
}
inline uint64_t IpWrapper::publicid() const {
  // @@protoc_insertion_point(field_get:np2ps.IpWrapper.publicID)
  return _internal_publicid();
}
inline void IpWrapper::_internal_set_publicid(uint64_t value) {
  
  _impl_.publicid_ = value;
}
inline void IpWrapper::set_publicid(uint64_t value) {
  _internal_set_publicid(value);
  // @@protoc_insertion_point(field_set:np2ps.IpWrapper.publicID)
}

// uint32 ipv4 = 10;
inline void IpWrapper::clear_ipv4() {
  _impl_.ipv4_ = 0u;
}
inline uint32_t IpWrapper::_internal_ipv4() const {
  return _impl_.ipv4_;
}
inline uint32_t IpWrapper::ipv4() const {
  // @@protoc_insertion_point(field_get:np2ps.IpWrapper.ipv4)
  return _internal_ipv4();
}
inline void IpWrapper::_internal_set_ipv4(uint32_t value) {
  
  _impl_.ipv4_ = value;
}
inline void IpWrapper::set_ipv4(uint32_t value) {
  _internal_set_ipv4(value);
  // @@protoc_insertion_point(field_set:np2ps.IpWrapper.ipv4)
}

// uint32 port = 20;
inline void IpWrapper::clear_port() {
  _impl_.port_ = 0u;
}
inline uint32_t IpWrapper::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t IpWrapper::port() const {
  // @@protoc_insertion_point(field_get:np2ps.IpWrapper.port)
  return _internal_port();
}
inline void IpWrapper::_internal_set_port(uint32_t value) {
  
  _impl_.port_ = value;
}
inline void IpWrapper::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:np2ps.IpWrapper.port)
}

// bool relay_flag = 25;
inline void IpWrapper::clear_relay_flag() {
  _impl_.relay_flag_ = false;
}
inline bool IpWrapper::_internal_relay_flag() const {
  return _impl_.relay_flag_;
}
inline bool IpWrapper::relay_flag() const {
  // @@protoc_insertion_point(field_get:np2ps.IpWrapper.relay_flag)
  return _internal_relay_flag();
}
inline void IpWrapper::_internal_set_relay_flag(bool value) {
  
  _impl_.relay_flag_ = value;
}
inline void IpWrapper::set_relay_flag(bool value) {
  _internal_set_relay_flag(value);
  // @@protoc_insertion_point(field_set:np2ps.IpWrapper.relay_flag)
}

// optional string eax_key = 30;
inline bool IpWrapper::_internal_has_eax_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IpWrapper::has_eax_key() const {
  return _internal_has_eax_key();
}
inline void IpWrapper::clear_eax_key() {
  _impl_.eax_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IpWrapper::eax_key() const {
  // @@protoc_insertion_point(field_get:np2ps.IpWrapper.eax_key)
  return _internal_eax_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IpWrapper::set_eax_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.eax_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.IpWrapper.eax_key)
}
inline std::string* IpWrapper::mutable_eax_key() {
  std::string* _s = _internal_mutable_eax_key();
  // @@protoc_insertion_point(field_mutable:np2ps.IpWrapper.eax_key)
  return _s;
}
inline const std::string& IpWrapper::_internal_eax_key() const {
  return _impl_.eax_key_.Get();
}
inline void IpWrapper::_internal_set_eax_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.eax_key_.Set(value, GetArenaForAllocation());
}
inline std::string* IpWrapper::_internal_mutable_eax_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.eax_key_.Mutable(GetArenaForAllocation());
}
inline std::string* IpWrapper::release_eax_key() {
  // @@protoc_insertion_point(field_release:np2ps.IpWrapper.eax_key)
  if (!_internal_has_eax_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.eax_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.eax_key_.IsDefault()) {
    _impl_.eax_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IpWrapper::set_allocated_eax_key(std::string* eax_key) {
  if (eax_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.eax_key_.SetAllocated(eax_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.eax_key_.IsDefault()) {
    _impl_.eax_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.IpWrapper.eax_key)
}

// optional string rsa_public_key = 40;
inline bool IpWrapper::_internal_has_rsa_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool IpWrapper::has_rsa_public_key() const {
  return _internal_has_rsa_public_key();
}
inline void IpWrapper::clear_rsa_public_key() {
  _impl_.rsa_public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IpWrapper::rsa_public_key() const {
  // @@protoc_insertion_point(field_get:np2ps.IpWrapper.rsa_public_key)
  return _internal_rsa_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IpWrapper::set_rsa_public_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.rsa_public_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.IpWrapper.rsa_public_key)
}
inline std::string* IpWrapper::mutable_rsa_public_key() {
  std::string* _s = _internal_mutable_rsa_public_key();
  // @@protoc_insertion_point(field_mutable:np2ps.IpWrapper.rsa_public_key)
  return _s;
}
inline const std::string& IpWrapper::_internal_rsa_public_key() const {
  return _impl_.rsa_public_key_.Get();
}
inline void IpWrapper::_internal_set_rsa_public_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rsa_public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* IpWrapper::_internal_mutable_rsa_public_key() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.rsa_public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* IpWrapper::release_rsa_public_key() {
  // @@protoc_insertion_point(field_release:np2ps.IpWrapper.rsa_public_key)
  if (!_internal_has_rsa_public_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.rsa_public_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rsa_public_key_.IsDefault()) {
    _impl_.rsa_public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IpWrapper::set_allocated_rsa_public_key(std::string* rsa_public_key) {
  if (rsa_public_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rsa_public_key_.SetAllocated(rsa_public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rsa_public_key_.IsDefault()) {
    _impl_.rsa_public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.IpWrapper.rsa_public_key)
}

// -------------------------------------------------------------------

// IpMap

// .np2ps.IpWrapper my_IP = 10;
inline bool IpMap::_internal_has_my_ip() const {
  return this != internal_default_instance() && _impl_.my_ip_ != nullptr;
}
inline bool IpMap::has_my_ip() const {
  return _internal_has_my_ip();
}
inline void IpMap::clear_my_ip() {
  if (GetArenaForAllocation() == nullptr && _impl_.my_ip_ != nullptr) {
    delete _impl_.my_ip_;
  }
  _impl_.my_ip_ = nullptr;
}
inline const ::np2ps::IpWrapper& IpMap::_internal_my_ip() const {
  const ::np2ps::IpWrapper* p = _impl_.my_ip_;
  return p != nullptr ? *p : reinterpret_cast<const ::np2ps::IpWrapper&>(
      ::np2ps::_IpWrapper_default_instance_);
}
inline const ::np2ps::IpWrapper& IpMap::my_ip() const {
  // @@protoc_insertion_point(field_get:np2ps.IpMap.my_IP)
  return _internal_my_ip();
}
inline void IpMap::unsafe_arena_set_allocated_my_ip(
    ::np2ps::IpWrapper* my_ip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.my_ip_);
  }
  _impl_.my_ip_ = my_ip;
  if (my_ip) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.IpMap.my_IP)
}
inline ::np2ps::IpWrapper* IpMap::release_my_ip() {
  
  ::np2ps::IpWrapper* temp = _impl_.my_ip_;
  _impl_.my_ip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::np2ps::IpWrapper* IpMap::unsafe_arena_release_my_ip() {
  // @@protoc_insertion_point(field_release:np2ps.IpMap.my_IP)
  
  ::np2ps::IpWrapper* temp = _impl_.my_ip_;
  _impl_.my_ip_ = nullptr;
  return temp;
}
inline ::np2ps::IpWrapper* IpMap::_internal_mutable_my_ip() {
  
  if (_impl_.my_ip_ == nullptr) {
    auto* p = CreateMaybeMessage<::np2ps::IpWrapper>(GetArenaForAllocation());
    _impl_.my_ip_ = p;
  }
  return _impl_.my_ip_;
}
inline ::np2ps::IpWrapper* IpMap::mutable_my_ip() {
  ::np2ps::IpWrapper* _msg = _internal_mutable_my_ip();
  // @@protoc_insertion_point(field_mutable:np2ps.IpMap.my_IP)
  return _msg;
}
inline void IpMap::set_allocated_my_ip(::np2ps::IpWrapper* my_ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.my_ip_;
  }
  if (my_ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(my_ip);
    if (message_arena != submessage_arena) {
      my_ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_ip, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.my_ip_ = my_ip;
  // @@protoc_insertion_point(field_set_allocated:np2ps.IpMap.my_IP)
}

// uint64 my_public_ID = 20;
inline void IpMap::clear_my_public_id() {
  _impl_.my_public_id_ = uint64_t{0u};
}
inline uint64_t IpMap::_internal_my_public_id() const {
  return _impl_.my_public_id_;
}
inline uint64_t IpMap::my_public_id() const {
  // @@protoc_insertion_point(field_get:np2ps.IpMap.my_public_ID)
  return _internal_my_public_id();
}
inline void IpMap::_internal_set_my_public_id(uint64_t value) {
  
  _impl_.my_public_id_ = value;
}
inline void IpMap::set_my_public_id(uint64_t value) {
  _internal_set_my_public_id(value);
  // @@protoc_insertion_point(field_set:np2ps.IpMap.my_public_ID)
}

// optional string rsa_private_key = 30;
inline bool IpMap::_internal_has_rsa_private_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool IpMap::has_rsa_private_key() const {
  return _internal_has_rsa_private_key();
}
inline void IpMap::clear_rsa_private_key() {
  _impl_.rsa_private_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IpMap::rsa_private_key() const {
  // @@protoc_insertion_point(field_get:np2ps.IpMap.rsa_private_key)
  return _internal_rsa_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IpMap::set_rsa_private_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.rsa_private_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.IpMap.rsa_private_key)
}
inline std::string* IpMap::mutable_rsa_private_key() {
  std::string* _s = _internal_mutable_rsa_private_key();
  // @@protoc_insertion_point(field_mutable:np2ps.IpMap.rsa_private_key)
  return _s;
}
inline const std::string& IpMap::_internal_rsa_private_key() const {
  return _impl_.rsa_private_key_.Get();
}
inline void IpMap::_internal_set_rsa_private_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rsa_private_key_.Set(value, GetArenaForAllocation());
}
inline std::string* IpMap::_internal_mutable_rsa_private_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.rsa_private_key_.Mutable(GetArenaForAllocation());
}
inline std::string* IpMap::release_rsa_private_key() {
  // @@protoc_insertion_point(field_release:np2ps.IpMap.rsa_private_key)
  if (!_internal_has_rsa_private_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.rsa_private_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rsa_private_key_.IsDefault()) {
    _impl_.rsa_private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void IpMap::set_allocated_rsa_private_key(std::string* rsa_private_key) {
  if (rsa_private_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.rsa_private_key_.SetAllocated(rsa_private_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rsa_private_key_.IsDefault()) {
    _impl_.rsa_private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.IpMap.rsa_private_key)
}

// repeated .np2ps.IpWrapper wrapper_map = 40;
inline int IpMap::_internal_wrapper_map_size() const {
  return _impl_.wrapper_map_.size();
}
inline int IpMap::wrapper_map_size() const {
  return _internal_wrapper_map_size();
}
inline void IpMap::clear_wrapper_map() {
  _impl_.wrapper_map_.Clear();
}
inline ::np2ps::IpWrapper* IpMap::mutable_wrapper_map(int index) {
  // @@protoc_insertion_point(field_mutable:np2ps.IpMap.wrapper_map)
  return _impl_.wrapper_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::IpWrapper >*
IpMap::mutable_wrapper_map() {
  // @@protoc_insertion_point(field_mutable_list:np2ps.IpMap.wrapper_map)
  return &_impl_.wrapper_map_;
}
inline const ::np2ps::IpWrapper& IpMap::_internal_wrapper_map(int index) const {
  return _impl_.wrapper_map_.Get(index);
}
inline const ::np2ps::IpWrapper& IpMap::wrapper_map(int index) const {
  // @@protoc_insertion_point(field_get:np2ps.IpMap.wrapper_map)
  return _internal_wrapper_map(index);
}
inline ::np2ps::IpWrapper* IpMap::_internal_add_wrapper_map() {
  return _impl_.wrapper_map_.Add();
}
inline ::np2ps::IpWrapper* IpMap::add_wrapper_map() {
  ::np2ps::IpWrapper* _add = _internal_add_wrapper_map();
  // @@protoc_insertion_point(field_add:np2ps.IpMap.wrapper_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::IpWrapper >&
IpMap::wrapper_map() const {
  // @@protoc_insertion_point(field_list:np2ps.IpMap.wrapper_map)
  return _impl_.wrapper_map_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace np2ps

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ip_5fmap_2eproto
