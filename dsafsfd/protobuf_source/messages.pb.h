// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "articles.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace np2ps {
class ArticleAll;
struct ArticleAllDefaultTypeInternal;
extern ArticleAllDefaultTypeInternal _ArticleAll_default_instance_;
class ArticleDataUpdate;
struct ArticleDataUpdateDefaultTypeInternal;
extern ArticleDataUpdateDefaultTypeInternal _ArticleDataUpdate_default_instance_;
class ArticleHeader;
struct ArticleHeaderDefaultTypeInternal;
extern ArticleHeaderDefaultTypeInternal _ArticleHeader_default_instance_;
class ArticleList;
struct ArticleListDefaultTypeInternal;
extern ArticleListDefaultTypeInternal _ArticleList_default_instance_;
class ArticleSolicitation;
struct ArticleSolicitationDefaultTypeInternal;
extern ArticleSolicitationDefaultTypeInternal _ArticleSolicitation_default_instance_;
class Credentials;
struct CredentialsDefaultTypeInternal;
extern CredentialsDefaultTypeInternal _Credentials_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class PublicKey;
struct PublicKeyDefaultTypeInternal;
extern PublicKeyDefaultTypeInternal _PublicKey_default_instance_;
class SymmetricKey;
struct SymmetricKeyDefaultTypeInternal;
extern SymmetricKeyDefaultTypeInternal _SymmetricKey_default_instance_;
class UpdateArticle;
struct UpdateArticleDefaultTypeInternal;
extern UpdateArticleDefaultTypeInternal _UpdateArticle_default_instance_;
class UpdateMargin;
struct UpdateMarginDefaultTypeInternal;
extern UpdateMarginDefaultTypeInternal _UpdateMargin_default_instance_;
class UserIsMember;
struct UserIsMemberDefaultTypeInternal;
extern UserIsMemberDefaultTypeInternal _UserIsMember_default_instance_;
}  // namespace np2ps
PROTOBUF_NAMESPACE_OPEN
template<> ::np2ps::ArticleAll* Arena::CreateMaybeMessage<::np2ps::ArticleAll>(Arena*);
template<> ::np2ps::ArticleDataUpdate* Arena::CreateMaybeMessage<::np2ps::ArticleDataUpdate>(Arena*);
template<> ::np2ps::ArticleHeader* Arena::CreateMaybeMessage<::np2ps::ArticleHeader>(Arena*);
template<> ::np2ps::ArticleList* Arena::CreateMaybeMessage<::np2ps::ArticleList>(Arena*);
template<> ::np2ps::ArticleSolicitation* Arena::CreateMaybeMessage<::np2ps::ArticleSolicitation>(Arena*);
template<> ::np2ps::Credentials* Arena::CreateMaybeMessage<::np2ps::Credentials>(Arena*);
template<> ::np2ps::Message* Arena::CreateMaybeMessage<::np2ps::Message>(Arena*);
template<> ::np2ps::PublicKey* Arena::CreateMaybeMessage<::np2ps::PublicKey>(Arena*);
template<> ::np2ps::SymmetricKey* Arena::CreateMaybeMessage<::np2ps::SymmetricKey>(Arena*);
template<> ::np2ps::UpdateArticle* Arena::CreateMaybeMessage<::np2ps::UpdateArticle>(Arena*);
template<> ::np2ps::UpdateMargin* Arena::CreateMaybeMessage<::np2ps::UpdateMargin>(Arena*);
template<> ::np2ps::UserIsMember* Arena::CreateMaybeMessage<::np2ps::UserIsMember>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace np2ps {

enum MessageType : int {
  EMPTY = 0,
  ARTICLE_ALL = 10,
  ARTICLE_HEADER = 20,
  ARTICLE_SOLICITATION = 21,
  ARTICLE_LIST = 25,
  USER_IS_MEMBER = 30,
  ARTICLE_DATA_UPDATE = 40,
  UPDATE_MARGIN = 70,
  UPDATE_ARTICLE = 90,
  CREDENTIALS = 100,
  SYMMETRIC_KEY = 110,
  PUBLIC_KEY = 120,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = EMPTY;
constexpr MessageType MessageType_MAX = PUBLIC_KEY;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum MessageContext : int {
  ERROR = 0,
  REQUEST = 10,
  RESPONSE = 20,
  ONE_WAY = 30,
  MessageContext_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MessageContext_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MessageContext_IsValid(int value);
constexpr MessageContext MessageContext_MIN = ERROR;
constexpr MessageContext MessageContext_MAX = ONE_WAY;
constexpr int MessageContext_ARRAYSIZE = MessageContext_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageContext_descriptor();
template<typename T>
inline const std::string& MessageContext_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageContext>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageContext_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageContext_descriptor(), enum_t_value);
}
inline bool MessageContext_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageContext* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageContext>(
    MessageContext_descriptor(), name, value);
}
enum MarginAction : int {
  REMOVE = 0,
  ADD = 10,
  UPDATE = 20,
  MarginAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MarginAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MarginAction_IsValid(int value);
constexpr MarginAction MarginAction_MIN = REMOVE;
constexpr MarginAction MarginAction_MAX = UPDATE;
constexpr int MarginAction_ARRAYSIZE = MarginAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarginAction_descriptor();
template<typename T>
inline const std::string& MarginAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MarginAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MarginAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MarginAction_descriptor(), enum_t_value);
}
inline bool MarginAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MarginAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarginAction>(
    MarginAction_descriptor(), name, value);
}
enum ArticleAction : int {
  DOWNLOAD = 0,
  REMOVAL = 10,
  ArticleAction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ArticleAction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ArticleAction_IsValid(int value);
constexpr ArticleAction ArticleAction_MIN = DOWNLOAD;
constexpr ArticleAction ArticleAction_MAX = REMOVAL;
constexpr int ArticleAction_ARRAYSIZE = ArticleAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArticleAction_descriptor();
template<typename T>
inline const std::string& ArticleAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArticleAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArticleAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArticleAction_descriptor(), enum_t_value);
}
inline bool ArticleAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArticleAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArticleAction>(
    ArticleAction_descriptor(), name, value);
}
// ===================================================================

class Message final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  ~Message() override;
  explicit PROTOBUF_CONSTEXPR Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum MessageOneofCase {
    kArticleAll = 110,
    kArticleHeader = 120,
    kArticleSol = 121,
    kArticleList = 125,
    kUserIsMember = 130,
    kArticleDataUpdate = 140,
    kUpdateMargin = 170,
    kUpdateArticle = 180,
    kCredentials = 200,
    kSymmetricKey = 210,
    kPublicKey = 220,
    MESSAGE_ONEOF_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Message& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Message& from) {
    Message::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kMsgTypeFieldNumber = 3,
    kMsgCtxFieldNumber = 4,
    kSeqFieldNumber = 5,
    kArticleAllFieldNumber = 110,
    kArticleHeaderFieldNumber = 120,
    kArticleSolFieldNumber = 121,
    kArticleListFieldNumber = 125,
    kUserIsMemberFieldNumber = 130,
    kArticleDataUpdateFieldNumber = 140,
    kUpdateMarginFieldNumber = 170,
    kUpdateArticleFieldNumber = 180,
    kCredentialsFieldNumber = 200,
    kSymmetricKeyFieldNumber = 210,
    kPublicKeyFieldNumber = 220,
  };
  // uint64 from = 1;
  void clear_from();
  uint64_t from() const;
  void set_from(uint64_t value);
  private:
  uint64_t _internal_from() const;
  void _internal_set_from(uint64_t value);
  public:

  // uint64 to = 2;
  void clear_to();
  uint64_t to() const;
  void set_to(uint64_t value);
  private:
  uint64_t _internal_to() const;
  void _internal_set_to(uint64_t value);
  public:

  // .np2ps.MessageType msg_type = 3;
  void clear_msg_type();
  ::np2ps::MessageType msg_type() const;
  void set_msg_type(::np2ps::MessageType value);
  private:
  ::np2ps::MessageType _internal_msg_type() const;
  void _internal_set_msg_type(::np2ps::MessageType value);
  public:

  // .np2ps.MessageContext msg_ctx = 4;
  void clear_msg_ctx();
  ::np2ps::MessageContext msg_ctx() const;
  void set_msg_ctx(::np2ps::MessageContext value);
  private:
  ::np2ps::MessageContext _internal_msg_ctx() const;
  void _internal_set_msg_ctx(::np2ps::MessageContext value);
  public:

  // uint64 seq = 5;
  void clear_seq();
  uint64_t seq() const;
  void set_seq(uint64_t value);
  private:
  uint64_t _internal_seq() const;
  void _internal_set_seq(uint64_t value);
  public:

  // .np2ps.ArticleAll article_all = 110;
  bool has_article_all() const;
  private:
  bool _internal_has_article_all() const;
  public:
  void clear_article_all();
  const ::np2ps::ArticleAll& article_all() const;
  PROTOBUF_NODISCARD ::np2ps::ArticleAll* release_article_all();
  ::np2ps::ArticleAll* mutable_article_all();
  void set_allocated_article_all(::np2ps::ArticleAll* article_all);
  private:
  const ::np2ps::ArticleAll& _internal_article_all() const;
  ::np2ps::ArticleAll* _internal_mutable_article_all();
  public:
  void unsafe_arena_set_allocated_article_all(
      ::np2ps::ArticleAll* article_all);
  ::np2ps::ArticleAll* unsafe_arena_release_article_all();

  // .np2ps.ArticleHeader article_header = 120;
  bool has_article_header() const;
  private:
  bool _internal_has_article_header() const;
  public:
  void clear_article_header();
  const ::np2ps::ArticleHeader& article_header() const;
  PROTOBUF_NODISCARD ::np2ps::ArticleHeader* release_article_header();
  ::np2ps::ArticleHeader* mutable_article_header();
  void set_allocated_article_header(::np2ps::ArticleHeader* article_header);
  private:
  const ::np2ps::ArticleHeader& _internal_article_header() const;
  ::np2ps::ArticleHeader* _internal_mutable_article_header();
  public:
  void unsafe_arena_set_allocated_article_header(
      ::np2ps::ArticleHeader* article_header);
  ::np2ps::ArticleHeader* unsafe_arena_release_article_header();

  // .np2ps.ArticleSolicitation article_sol = 121;
  bool has_article_sol() const;
  private:
  bool _internal_has_article_sol() const;
  public:
  void clear_article_sol();
  const ::np2ps::ArticleSolicitation& article_sol() const;
  PROTOBUF_NODISCARD ::np2ps::ArticleSolicitation* release_article_sol();
  ::np2ps::ArticleSolicitation* mutable_article_sol();
  void set_allocated_article_sol(::np2ps::ArticleSolicitation* article_sol);
  private:
  const ::np2ps::ArticleSolicitation& _internal_article_sol() const;
  ::np2ps::ArticleSolicitation* _internal_mutable_article_sol();
  public:
  void unsafe_arena_set_allocated_article_sol(
      ::np2ps::ArticleSolicitation* article_sol);
  ::np2ps::ArticleSolicitation* unsafe_arena_release_article_sol();

  // .np2ps.ArticleList article_list = 125;
  bool has_article_list() const;
  private:
  bool _internal_has_article_list() const;
  public:
  void clear_article_list();
  const ::np2ps::ArticleList& article_list() const;
  PROTOBUF_NODISCARD ::np2ps::ArticleList* release_article_list();
  ::np2ps::ArticleList* mutable_article_list();
  void set_allocated_article_list(::np2ps::ArticleList* article_list);
  private:
  const ::np2ps::ArticleList& _internal_article_list() const;
  ::np2ps::ArticleList* _internal_mutable_article_list();
  public:
  void unsafe_arena_set_allocated_article_list(
      ::np2ps::ArticleList* article_list);
  ::np2ps::ArticleList* unsafe_arena_release_article_list();

  // .np2ps.UserIsMember user_is_member = 130;
  bool has_user_is_member() const;
  private:
  bool _internal_has_user_is_member() const;
  public:
  void clear_user_is_member();
  const ::np2ps::UserIsMember& user_is_member() const;
  PROTOBUF_NODISCARD ::np2ps::UserIsMember* release_user_is_member();
  ::np2ps::UserIsMember* mutable_user_is_member();
  void set_allocated_user_is_member(::np2ps::UserIsMember* user_is_member);
  private:
  const ::np2ps::UserIsMember& _internal_user_is_member() const;
  ::np2ps::UserIsMember* _internal_mutable_user_is_member();
  public:
  void unsafe_arena_set_allocated_user_is_member(
      ::np2ps::UserIsMember* user_is_member);
  ::np2ps::UserIsMember* unsafe_arena_release_user_is_member();

  // .np2ps.ArticleDataUpdate article_data_update = 140;
  bool has_article_data_update() const;
  private:
  bool _internal_has_article_data_update() const;
  public:
  void clear_article_data_update();
  const ::np2ps::ArticleDataUpdate& article_data_update() const;
  PROTOBUF_NODISCARD ::np2ps::ArticleDataUpdate* release_article_data_update();
  ::np2ps::ArticleDataUpdate* mutable_article_data_update();
  void set_allocated_article_data_update(::np2ps::ArticleDataUpdate* article_data_update);
  private:
  const ::np2ps::ArticleDataUpdate& _internal_article_data_update() const;
  ::np2ps::ArticleDataUpdate* _internal_mutable_article_data_update();
  public:
  void unsafe_arena_set_allocated_article_data_update(
      ::np2ps::ArticleDataUpdate* article_data_update);
  ::np2ps::ArticleDataUpdate* unsafe_arena_release_article_data_update();

  // .np2ps.UpdateMargin update_margin = 170;
  bool has_update_margin() const;
  private:
  bool _internal_has_update_margin() const;
  public:
  void clear_update_margin();
  const ::np2ps::UpdateMargin& update_margin() const;
  PROTOBUF_NODISCARD ::np2ps::UpdateMargin* release_update_margin();
  ::np2ps::UpdateMargin* mutable_update_margin();
  void set_allocated_update_margin(::np2ps::UpdateMargin* update_margin);
  private:
  const ::np2ps::UpdateMargin& _internal_update_margin() const;
  ::np2ps::UpdateMargin* _internal_mutable_update_margin();
  public:
  void unsafe_arena_set_allocated_update_margin(
      ::np2ps::UpdateMargin* update_margin);
  ::np2ps::UpdateMargin* unsafe_arena_release_update_margin();

  // .np2ps.UpdateArticle update_article = 180;
  bool has_update_article() const;
  private:
  bool _internal_has_update_article() const;
  public:
  void clear_update_article();
  const ::np2ps::UpdateArticle& update_article() const;
  PROTOBUF_NODISCARD ::np2ps::UpdateArticle* release_update_article();
  ::np2ps::UpdateArticle* mutable_update_article();
  void set_allocated_update_article(::np2ps::UpdateArticle* update_article);
  private:
  const ::np2ps::UpdateArticle& _internal_update_article() const;
  ::np2ps::UpdateArticle* _internal_mutable_update_article();
  public:
  void unsafe_arena_set_allocated_update_article(
      ::np2ps::UpdateArticle* update_article);
  ::np2ps::UpdateArticle* unsafe_arena_release_update_article();

  // .np2ps.Credentials credentials = 200;
  bool has_credentials() const;
  private:
  bool _internal_has_credentials() const;
  public:
  void clear_credentials();
  const ::np2ps::Credentials& credentials() const;
  PROTOBUF_NODISCARD ::np2ps::Credentials* release_credentials();
  ::np2ps::Credentials* mutable_credentials();
  void set_allocated_credentials(::np2ps::Credentials* credentials);
  private:
  const ::np2ps::Credentials& _internal_credentials() const;
  ::np2ps::Credentials* _internal_mutable_credentials();
  public:
  void unsafe_arena_set_allocated_credentials(
      ::np2ps::Credentials* credentials);
  ::np2ps::Credentials* unsafe_arena_release_credentials();

  // .np2ps.SymmetricKey symmetric_key = 210;
  bool has_symmetric_key() const;
  private:
  bool _internal_has_symmetric_key() const;
  public:
  void clear_symmetric_key();
  const ::np2ps::SymmetricKey& symmetric_key() const;
  PROTOBUF_NODISCARD ::np2ps::SymmetricKey* release_symmetric_key();
  ::np2ps::SymmetricKey* mutable_symmetric_key();
  void set_allocated_symmetric_key(::np2ps::SymmetricKey* symmetric_key);
  private:
  const ::np2ps::SymmetricKey& _internal_symmetric_key() const;
  ::np2ps::SymmetricKey* _internal_mutable_symmetric_key();
  public:
  void unsafe_arena_set_allocated_symmetric_key(
      ::np2ps::SymmetricKey* symmetric_key);
  ::np2ps::SymmetricKey* unsafe_arena_release_symmetric_key();

  // .np2ps.PublicKey public_key = 220;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const ::np2ps::PublicKey& public_key() const;
  PROTOBUF_NODISCARD ::np2ps::PublicKey* release_public_key();
  ::np2ps::PublicKey* mutable_public_key();
  void set_allocated_public_key(::np2ps::PublicKey* public_key);
  private:
  const ::np2ps::PublicKey& _internal_public_key() const;
  ::np2ps::PublicKey* _internal_mutable_public_key();
  public:
  void unsafe_arena_set_allocated_public_key(
      ::np2ps::PublicKey* public_key);
  ::np2ps::PublicKey* unsafe_arena_release_public_key();

  void clear_message_oneof();
  MessageOneofCase message_oneof_case() const;
  // @@protoc_insertion_point(class_scope:np2ps.Message)
 private:
  class _Internal;
  void set_has_article_all();
  void set_has_article_header();
  void set_has_article_sol();
  void set_has_article_list();
  void set_has_user_is_member();
  void set_has_article_data_update();
  void set_has_update_margin();
  void set_has_update_article();
  void set_has_credentials();
  void set_has_symmetric_key();
  void set_has_public_key();

  inline bool has_message_oneof() const;
  inline void clear_has_message_oneof();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t from_;
    uint64_t to_;
    int msg_type_;
    int msg_ctx_;
    uint64_t seq_;
    union MessageOneofUnion {
      constexpr MessageOneofUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::np2ps::ArticleAll* article_all_;
      ::np2ps::ArticleHeader* article_header_;
      ::np2ps::ArticleSolicitation* article_sol_;
      ::np2ps::ArticleList* article_list_;
      ::np2ps::UserIsMember* user_is_member_;
      ::np2ps::ArticleDataUpdate* article_data_update_;
      ::np2ps::UpdateMargin* update_margin_;
      ::np2ps::UpdateArticle* update_article_;
      ::np2ps::Credentials* credentials_;
      ::np2ps::SymmetricKey* symmetric_key_;
      ::np2ps::PublicKey* public_key_;
    } message_oneof_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ArticleAll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.ArticleAll) */ {
 public:
  inline ArticleAll() : ArticleAll(nullptr) {}
  ~ArticleAll() override;
  explicit PROTOBUF_CONSTEXPR ArticleAll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArticleAll(const ArticleAll& from);
  ArticleAll(ArticleAll&& from) noexcept
    : ArticleAll() {
    *this = ::std::move(from);
  }

  inline ArticleAll& operator=(const ArticleAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArticleAll& operator=(ArticleAll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArticleAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArticleAll* internal_default_instance() {
    return reinterpret_cast<const ArticleAll*>(
               &_ArticleAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ArticleAll& a, ArticleAll& b) {
    a.Swap(&b);
  }
  inline void Swap(ArticleAll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArticleAll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArticleAll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArticleAll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArticleAll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArticleAll& from) {
    ArticleAll::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArticleAll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.ArticleAll";
  }
  protected:
  explicit ArticleAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArticleActualFieldNumber = 4,
    kHeaderFieldNumber = 3,
    kArticleHashFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // optional string article_actual = 4;
  bool has_article_actual() const;
  private:
  bool _internal_has_article_actual() const;
  public:
  void clear_article_actual();
  const std::string& article_actual() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_article_actual(ArgT0&& arg0, ArgT... args);
  std::string* mutable_article_actual();
  PROTOBUF_NODISCARD std::string* release_article_actual();
  void set_allocated_article_actual(std::string* article_actual);
  private:
  const std::string& _internal_article_actual() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_article_actual(const std::string& value);
  std::string* _internal_mutable_article_actual();
  public:

  // optional .np2ps.Article header = 3;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::np2ps::Article& header() const;
  PROTOBUF_NODISCARD ::np2ps::Article* release_header();
  ::np2ps::Article* mutable_header();
  void set_allocated_header(::np2ps::Article* header);
  private:
  const ::np2ps::Article& _internal_header() const;
  ::np2ps::Article* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::np2ps::Article* header);
  ::np2ps::Article* unsafe_arena_release_header();

  // uint64 article_hash = 1;
  void clear_article_hash();
  uint64_t article_hash() const;
  void set_article_hash(uint64_t value);
  private:
  uint64_t _internal_article_hash() const;
  void _internal_set_article_hash(uint64_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.ArticleAll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr article_actual_;
    ::np2ps::Article* header_;
    uint64_t article_hash_;
    uint32_t level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ArticleHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.ArticleHeader) */ {
 public:
  inline ArticleHeader() : ArticleHeader(nullptr) {}
  ~ArticleHeader() override;
  explicit PROTOBUF_CONSTEXPR ArticleHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArticleHeader(const ArticleHeader& from);
  ArticleHeader(ArticleHeader&& from) noexcept
    : ArticleHeader() {
    *this = ::std::move(from);
  }

  inline ArticleHeader& operator=(const ArticleHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArticleHeader& operator=(ArticleHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArticleHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArticleHeader* internal_default_instance() {
    return reinterpret_cast<const ArticleHeader*>(
               &_ArticleHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ArticleHeader& a, ArticleHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(ArticleHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArticleHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArticleHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArticleHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArticleHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArticleHeader& from) {
    ArticleHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArticleHeader* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.ArticleHeader";
  }
  protected:
  explicit ArticleHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArticleFieldNumber = 4,
    kArticleHashFieldNumber = 2,
  };
  // optional .np2ps.Article article = 4;
  bool has_article() const;
  private:
  bool _internal_has_article() const;
  public:
  void clear_article();
  const ::np2ps::Article& article() const;
  PROTOBUF_NODISCARD ::np2ps::Article* release_article();
  ::np2ps::Article* mutable_article();
  void set_allocated_article(::np2ps::Article* article);
  private:
  const ::np2ps::Article& _internal_article() const;
  ::np2ps::Article* _internal_mutable_article();
  public:
  void unsafe_arena_set_allocated_article(
      ::np2ps::Article* article);
  ::np2ps::Article* unsafe_arena_release_article();

  // uint64 article_hash = 2;
  void clear_article_hash();
  uint64_t article_hash() const;
  void set_article_hash(uint64_t value);
  private:
  uint64_t _internal_article_hash() const;
  void _internal_set_article_hash(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.ArticleHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::np2ps::Article* article_;
    uint64_t article_hash_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ArticleList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.ArticleList) */ {
 public:
  inline ArticleList() : ArticleList(nullptr) {}
  ~ArticleList() override;
  explicit PROTOBUF_CONSTEXPR ArticleList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArticleList(const ArticleList& from);
  ArticleList(ArticleList&& from) noexcept
    : ArticleList() {
    *this = ::std::move(from);
  }

  inline ArticleList& operator=(const ArticleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArticleList& operator=(ArticleList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArticleList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArticleList* internal_default_instance() {
    return reinterpret_cast<const ArticleList*>(
               &_ArticleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ArticleList& a, ArticleList& b) {
    a.Swap(&b);
  }
  inline void Swap(ArticleList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArticleList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArticleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArticleList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArticleList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArticleList& from) {
    ArticleList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArticleList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.ArticleList";
  }
  protected:
  explicit ArticleList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoriesFieldNumber = 2,
    kResponseFieldNumber = 3,
    kAllArticlesFieldNumber = 1,
    kCountFieldNumber = 4,
  };
  // repeated string categories = 2;
  int categories_size() const;
  private:
  int _internal_categories_size() const;
  public:
  void clear_categories();
  const std::string& categories(int index) const;
  std::string* mutable_categories(int index);
  void set_categories(int index, const std::string& value);
  void set_categories(int index, std::string&& value);
  void set_categories(int index, const char* value);
  void set_categories(int index, const char* value, size_t size);
  std::string* add_categories();
  void add_categories(const std::string& value);
  void add_categories(std::string&& value);
  void add_categories(const char* value);
  void add_categories(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& categories() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_categories();
  private:
  const std::string& _internal_categories(int index) const;
  std::string* _internal_add_categories();
  public:

  // repeated .np2ps.Article response = 3;
  int response_size() const;
  private:
  int _internal_response_size() const;
  public:
  void clear_response();
  ::np2ps::Article* mutable_response(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::Article >*
      mutable_response();
  private:
  const ::np2ps::Article& _internal_response(int index) const;
  ::np2ps::Article* _internal_add_response();
  public:
  const ::np2ps::Article& response(int index) const;
  ::np2ps::Article* add_response();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::Article >&
      response() const;

  // bool all_articles = 1;
  void clear_all_articles();
  bool all_articles() const;
  void set_all_articles(bool value);
  private:
  bool _internal_all_articles() const;
  void _internal_set_all_articles(bool value);
  public:

  // int32 count = 4;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.ArticleList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> categories_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::Article > response_;
    bool all_articles_;
    int32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ArticleSolicitation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.ArticleSolicitation) */ {
 public:
  inline ArticleSolicitation() : ArticleSolicitation(nullptr) {}
  ~ArticleSolicitation() override;
  explicit PROTOBUF_CONSTEXPR ArticleSolicitation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArticleSolicitation(const ArticleSolicitation& from);
  ArticleSolicitation(ArticleSolicitation&& from) noexcept
    : ArticleSolicitation() {
    *this = ::std::move(from);
  }

  inline ArticleSolicitation& operator=(const ArticleSolicitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArticleSolicitation& operator=(ArticleSolicitation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArticleSolicitation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArticleSolicitation* internal_default_instance() {
    return reinterpret_cast<const ArticleSolicitation*>(
               &_ArticleSolicitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ArticleSolicitation& a, ArticleSolicitation& b) {
    a.Swap(&b);
  }
  inline void Swap(ArticleSolicitation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArticleSolicitation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArticleSolicitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArticleSolicitation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArticleSolicitation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArticleSolicitation& from) {
    ArticleSolicitation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArticleSolicitation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.ArticleSolicitation";
  }
  protected:
  explicit ArticleSolicitation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPossibleOwnersFieldNumber = 2,
    kArticleHashFieldNumber = 1,
    kLevelFieldNumber = 3,
  };
  // repeated uint64 possible_owners = 2;
  int possible_owners_size() const;
  private:
  int _internal_possible_owners_size() const;
  public:
  void clear_possible_owners();
  private:
  uint64_t _internal_possible_owners(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_possible_owners() const;
  void _internal_add_possible_owners(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_possible_owners();
  public:
  uint64_t possible_owners(int index) const;
  void set_possible_owners(int index, uint64_t value);
  void add_possible_owners(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      possible_owners() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_possible_owners();

  // uint64 article_hash = 1;
  void clear_article_hash();
  uint64_t article_hash() const;
  void set_article_hash(uint64_t value);
  private:
  uint64_t _internal_article_hash() const;
  void _internal_set_article_hash(uint64_t value);
  public:

  // optional uint32 level = 3;
  bool has_level() const;
  private:
  bool _internal_has_level() const;
  public:
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.ArticleSolicitation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > possible_owners_;
    mutable std::atomic<int> _possible_owners_cached_byte_size_;
    uint64_t article_hash_;
    uint32_t level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UserIsMember final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.UserIsMember) */ {
 public:
  inline UserIsMember() : UserIsMember(nullptr) {}
  ~UserIsMember() override;
  explicit PROTOBUF_CONSTEXPR UserIsMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserIsMember(const UserIsMember& from);
  UserIsMember(UserIsMember&& from) noexcept
    : UserIsMember() {
    *this = ::std::move(from);
  }

  inline UserIsMember& operator=(const UserIsMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserIsMember& operator=(UserIsMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserIsMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserIsMember* internal_default_instance() {
    return reinterpret_cast<const UserIsMember*>(
               &_UserIsMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserIsMember& a, UserIsMember& b) {
    a.Swap(&b);
  }
  inline void Swap(UserIsMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserIsMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserIsMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserIsMember>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserIsMember& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserIsMember& from) {
    UserIsMember::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserIsMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.UserIsMember";
  }
  protected:
  explicit UserIsMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserPkFieldNumber = 1,
    kLevelFieldNumber = 2,
    kIsMemberFieldNumber = 3,
  };
  // uint64 user_pk = 1;
  void clear_user_pk();
  uint64_t user_pk() const;
  void set_user_pk(uint64_t value);
  private:
  uint64_t _internal_user_pk() const;
  void _internal_set_user_pk(uint64_t value);
  public:

  // uint32 level = 2;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // bool is_member = 3;
  void clear_is_member();
  bool is_member() const;
  void set_is_member(bool value);
  private:
  bool _internal_is_member() const;
  void _internal_set_is_member(bool value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.UserIsMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t user_pk_;
    uint32_t level_;
    bool is_member_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class ArticleDataUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.ArticleDataUpdate) */ {
 public:
  inline ArticleDataUpdate() : ArticleDataUpdate(nullptr) {}
  ~ArticleDataUpdate() override;
  explicit PROTOBUF_CONSTEXPR ArticleDataUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ArticleDataUpdate(const ArticleDataUpdate& from);
  ArticleDataUpdate(ArticleDataUpdate&& from) noexcept
    : ArticleDataUpdate() {
    *this = ::std::move(from);
  }

  inline ArticleDataUpdate& operator=(const ArticleDataUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArticleDataUpdate& operator=(ArticleDataUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ArticleDataUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ArticleDataUpdate* internal_default_instance() {
    return reinterpret_cast<const ArticleDataUpdate*>(
               &_ArticleDataUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ArticleDataUpdate& a, ArticleDataUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ArticleDataUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ArticleDataUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ArticleDataUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ArticleDataUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ArticleDataUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ArticleDataUpdate& from) {
    ArticleDataUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArticleDataUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.ArticleDataUpdate";
  }
  protected:
  explicit ArticleDataUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArticlePkFieldNumber = 1,
    kArticleActionFieldNumber = 3,
  };
  // uint64 article_pk = 1;
  void clear_article_pk();
  uint64_t article_pk() const;
  void set_article_pk(uint64_t value);
  private:
  uint64_t _internal_article_pk() const;
  void _internal_set_article_pk(uint64_t value);
  public:

  // .np2ps.ArticleAction article_action = 3;
  void clear_article_action();
  ::np2ps::ArticleAction article_action() const;
  void set_article_action(::np2ps::ArticleAction value);
  private:
  ::np2ps::ArticleAction _internal_article_action() const;
  void _internal_set_article_action(::np2ps::ArticleAction value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.ArticleDataUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t article_pk_;
    int article_action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UpdateMargin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.UpdateMargin) */ {
 public:
  inline UpdateMargin() : UpdateMargin(nullptr) {}
  ~UpdateMargin() override;
  explicit PROTOBUF_CONSTEXPR UpdateMargin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateMargin(const UpdateMargin& from);
  UpdateMargin(UpdateMargin&& from) noexcept
    : UpdateMargin() {
    *this = ::std::move(from);
  }

  inline UpdateMargin& operator=(const UpdateMargin& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMargin& operator=(UpdateMargin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateMargin& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateMargin* internal_default_instance() {
    return reinterpret_cast<const UpdateMargin*>(
               &_UpdateMargin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateMargin& a, UpdateMargin& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMargin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMargin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateMargin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateMargin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateMargin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateMargin& from) {
    UpdateMargin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMargin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.UpdateMargin";
  }
  protected:
  explicit UpdateMargin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarginFieldNumber = 3,
    kArticlePkFieldNumber = 1,
    kMActionFieldNumber = 2,
  };
  // .np2ps.Margins margin = 3;
  bool has_margin() const;
  private:
  bool _internal_has_margin() const;
  public:
  void clear_margin();
  const ::np2ps::Margins& margin() const;
  PROTOBUF_NODISCARD ::np2ps::Margins* release_margin();
  ::np2ps::Margins* mutable_margin();
  void set_allocated_margin(::np2ps::Margins* margin);
  private:
  const ::np2ps::Margins& _internal_margin() const;
  ::np2ps::Margins* _internal_mutable_margin();
  public:
  void unsafe_arena_set_allocated_margin(
      ::np2ps::Margins* margin);
  ::np2ps::Margins* unsafe_arena_release_margin();

  // uint64 article_pk = 1;
  void clear_article_pk();
  uint64_t article_pk() const;
  void set_article_pk(uint64_t value);
  private:
  uint64_t _internal_article_pk() const;
  void _internal_set_article_pk(uint64_t value);
  public:

  // .np2ps.MarginAction m_action = 2;
  void clear_m_action();
  ::np2ps::MarginAction m_action() const;
  void set_m_action(::np2ps::MarginAction value);
  private:
  ::np2ps::MarginAction _internal_m_action() const;
  void _internal_set_m_action(::np2ps::MarginAction value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.UpdateMargin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::np2ps::Margins* margin_;
    uint64_t article_pk_;
    int m_action_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UpdateArticle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.UpdateArticle) */ {
 public:
  inline UpdateArticle() : UpdateArticle(nullptr) {}
  ~UpdateArticle() override;
  explicit PROTOBUF_CONSTEXPR UpdateArticle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateArticle(const UpdateArticle& from);
  UpdateArticle(UpdateArticle&& from) noexcept
    : UpdateArticle() {
    *this = ::std::move(from);
  }

  inline UpdateArticle& operator=(const UpdateArticle& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateArticle& operator=(UpdateArticle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateArticle& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateArticle* internal_default_instance() {
    return reinterpret_cast<const UpdateArticle*>(
               &_UpdateArticle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateArticle& a, UpdateArticle& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateArticle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateArticle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateArticle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateArticle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateArticle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateArticle& from) {
    UpdateArticle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateArticle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.UpdateArticle";
  }
  protected:
  explicit UpdateArticle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArticlePkFieldNumber = 1,
  };
  // uint64 article_pk = 1;
  void clear_article_pk();
  uint64_t article_pk() const;
  void set_article_pk(uint64_t value);
  private:
  uint64_t _internal_article_pk() const;
  void _internal_set_article_pk(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.UpdateArticle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t article_pk_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class Credentials final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.Credentials) */ {
 public:
  inline Credentials() : Credentials(nullptr) {}
  ~Credentials() override;
  explicit PROTOBUF_CONSTEXPR Credentials(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Credentials(const Credentials& from);
  Credentials(Credentials&& from) noexcept
    : Credentials() {
    *this = ::std::move(from);
  }

  inline Credentials& operator=(const Credentials& from) {
    CopyFrom(from);
    return *this;
  }
  inline Credentials& operator=(Credentials&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Credentials& default_instance() {
    return *internal_default_instance();
  }
  static inline const Credentials* internal_default_instance() {
    return reinterpret_cast<const Credentials*>(
               &_Credentials_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Credentials& a, Credentials& b) {
    a.Swap(&b);
  }
  inline void Swap(Credentials* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Credentials* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Credentials* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Credentials>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Credentials& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Credentials& from) {
    Credentials::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Credentials* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.Credentials";
  }
  protected:
  explicit Credentials(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpv4FieldNumber = 1,
    kIpv6FieldNumber = 2,
    kRsaPublicKeyFieldNumber = 3,
    kEaxKeyFieldNumber = 4,
    kReqIpv4FieldNumber = 5,
    kReqIpv6FieldNumber = 6,
    kReqRsaPublicKeyFieldNumber = 7,
    kReqEaxKeyFieldNumber = 8,
  };
  // optional string ipv4 = 1;
  bool has_ipv4() const;
  private:
  bool _internal_has_ipv4() const;
  public:
  void clear_ipv4();
  const std::string& ipv4() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv4(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv4();
  PROTOBUF_NODISCARD std::string* release_ipv4();
  void set_allocated_ipv4(std::string* ipv4);
  private:
  const std::string& _internal_ipv4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv4(const std::string& value);
  std::string* _internal_mutable_ipv4();
  public:

  // optional string ipv6 = 2;
  bool has_ipv6() const;
  private:
  bool _internal_has_ipv6() const;
  public:
  void clear_ipv6();
  const std::string& ipv6() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ipv6(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ipv6();
  PROTOBUF_NODISCARD std::string* release_ipv6();
  void set_allocated_ipv6(std::string* ipv6);
  private:
  const std::string& _internal_ipv6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6(const std::string& value);
  std::string* _internal_mutable_ipv6();
  public:

  // optional string rsa_public_key = 3;
  bool has_rsa_public_key() const;
  private:
  bool _internal_has_rsa_public_key() const;
  public:
  void clear_rsa_public_key();
  const std::string& rsa_public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rsa_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rsa_public_key();
  PROTOBUF_NODISCARD std::string* release_rsa_public_key();
  void set_allocated_rsa_public_key(std::string* rsa_public_key);
  private:
  const std::string& _internal_rsa_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rsa_public_key(const std::string& value);
  std::string* _internal_mutable_rsa_public_key();
  public:

  // optional string eax_key = 4;
  bool has_eax_key() const;
  private:
  bool _internal_has_eax_key() const;
  public:
  void clear_eax_key();
  const std::string& eax_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_eax_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_eax_key();
  PROTOBUF_NODISCARD std::string* release_eax_key();
  void set_allocated_eax_key(std::string* eax_key);
  private:
  const std::string& _internal_eax_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_eax_key(const std::string& value);
  std::string* _internal_mutable_eax_key();
  public:

  // bool req_ipv4 = 5;
  void clear_req_ipv4();
  bool req_ipv4() const;
  void set_req_ipv4(bool value);
  private:
  bool _internal_req_ipv4() const;
  void _internal_set_req_ipv4(bool value);
  public:

  // bool req_ipv6 = 6;
  void clear_req_ipv6();
  bool req_ipv6() const;
  void set_req_ipv6(bool value);
  private:
  bool _internal_req_ipv6() const;
  void _internal_set_req_ipv6(bool value);
  public:

  // bool req_rsa_public_key = 7;
  void clear_req_rsa_public_key();
  bool req_rsa_public_key() const;
  void set_req_rsa_public_key(bool value);
  private:
  bool _internal_req_rsa_public_key() const;
  void _internal_set_req_rsa_public_key(bool value);
  public:

  // bool req_eax_key = 8;
  void clear_req_eax_key();
  bool req_eax_key() const;
  void set_req_eax_key(bool value);
  private:
  bool _internal_req_eax_key() const;
  void _internal_set_req_eax_key(bool value);
  public:

  // @@protoc_insertion_point(class_scope:np2ps.Credentials)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv4_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ipv6_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rsa_public_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eax_key_;
    bool req_ipv4_;
    bool req_ipv6_;
    bool req_rsa_public_key_;
    bool req_eax_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SymmetricKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.SymmetricKey) */ {
 public:
  inline SymmetricKey() : SymmetricKey(nullptr) {}
  ~SymmetricKey() override;
  explicit PROTOBUF_CONSTEXPR SymmetricKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SymmetricKey(const SymmetricKey& from);
  SymmetricKey(SymmetricKey&& from) noexcept
    : SymmetricKey() {
    *this = ::std::move(from);
  }

  inline SymmetricKey& operator=(const SymmetricKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymmetricKey& operator=(SymmetricKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SymmetricKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymmetricKey* internal_default_instance() {
    return reinterpret_cast<const SymmetricKey*>(
               &_SymmetricKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SymmetricKey& a, SymmetricKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SymmetricKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymmetricKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymmetricKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SymmetricKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SymmetricKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SymmetricKey& from) {
    SymmetricKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymmetricKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.SymmetricKey";
  }
  protected:
  explicit SymmetricKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes signature = 2;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:np2ps.SymmetricKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class PublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:np2ps.PublicKey) */ {
 public:
  inline PublicKey() : PublicKey(nullptr) {}
  ~PublicKey() override;
  explicit PROTOBUF_CONSTEXPR PublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublicKey(const PublicKey& from);
  PublicKey(PublicKey&& from) noexcept
    : PublicKey() {
    *this = ::std::move(from);
  }

  inline PublicKey& operator=(const PublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublicKey& operator=(PublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublicKey* internal_default_instance() {
    return reinterpret_cast<const PublicKey*>(
               &_PublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PublicKey& a, PublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(PublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublicKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublicKey>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublicKey& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PublicKey& from) {
    PublicKey::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "np2ps.PublicKey";
  }
  protected:
  explicit PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:np2ps.PublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// uint64 from = 1;
inline void Message::clear_from() {
  _impl_.from_ = uint64_t{0u};
}
inline uint64_t Message::_internal_from() const {
  return _impl_.from_;
}
inline uint64_t Message::from() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.from)
  return _internal_from();
}
inline void Message::_internal_set_from(uint64_t value) {
  
  _impl_.from_ = value;
}
inline void Message::set_from(uint64_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:np2ps.Message.from)
}

// uint64 to = 2;
inline void Message::clear_to() {
  _impl_.to_ = uint64_t{0u};
}
inline uint64_t Message::_internal_to() const {
  return _impl_.to_;
}
inline uint64_t Message::to() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.to)
  return _internal_to();
}
inline void Message::_internal_set_to(uint64_t value) {
  
  _impl_.to_ = value;
}
inline void Message::set_to(uint64_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:np2ps.Message.to)
}

// uint64 seq = 5;
inline void Message::clear_seq() {
  _impl_.seq_ = uint64_t{0u};
}
inline uint64_t Message::_internal_seq() const {
  return _impl_.seq_;
}
inline uint64_t Message::seq() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.seq)
  return _internal_seq();
}
inline void Message::_internal_set_seq(uint64_t value) {
  
  _impl_.seq_ = value;
}
inline void Message::set_seq(uint64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:np2ps.Message.seq)
}

// .np2ps.MessageType msg_type = 3;
inline void Message::clear_msg_type() {
  _impl_.msg_type_ = 0;
}
inline ::np2ps::MessageType Message::_internal_msg_type() const {
  return static_cast< ::np2ps::MessageType >(_impl_.msg_type_);
}
inline ::np2ps::MessageType Message::msg_type() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.msg_type)
  return _internal_msg_type();
}
inline void Message::_internal_set_msg_type(::np2ps::MessageType value) {
  
  _impl_.msg_type_ = value;
}
inline void Message::set_msg_type(::np2ps::MessageType value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:np2ps.Message.msg_type)
}

// .np2ps.MessageContext msg_ctx = 4;
inline void Message::clear_msg_ctx() {
  _impl_.msg_ctx_ = 0;
}
inline ::np2ps::MessageContext Message::_internal_msg_ctx() const {
  return static_cast< ::np2ps::MessageContext >(_impl_.msg_ctx_);
}
inline ::np2ps::MessageContext Message::msg_ctx() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.msg_ctx)
  return _internal_msg_ctx();
}
inline void Message::_internal_set_msg_ctx(::np2ps::MessageContext value) {
  
  _impl_.msg_ctx_ = value;
}
inline void Message::set_msg_ctx(::np2ps::MessageContext value) {
  _internal_set_msg_ctx(value);
  // @@protoc_insertion_point(field_set:np2ps.Message.msg_ctx)
}

// .np2ps.ArticleAll article_all = 110;
inline bool Message::_internal_has_article_all() const {
  return message_oneof_case() == kArticleAll;
}
inline bool Message::has_article_all() const {
  return _internal_has_article_all();
}
inline void Message::set_has_article_all() {
  _impl_._oneof_case_[0] = kArticleAll;
}
inline void Message::clear_article_all() {
  if (_internal_has_article_all()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.article_all_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::ArticleAll* Message::release_article_all() {
  // @@protoc_insertion_point(field_release:np2ps.Message.article_all)
  if (_internal_has_article_all()) {
    clear_has_message_oneof();
    ::np2ps::ArticleAll* temp = _impl_.message_oneof_.article_all_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.article_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::ArticleAll& Message::_internal_article_all() const {
  return _internal_has_article_all()
      ? *_impl_.message_oneof_.article_all_
      : reinterpret_cast< ::np2ps::ArticleAll&>(::np2ps::_ArticleAll_default_instance_);
}
inline const ::np2ps::ArticleAll& Message::article_all() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.article_all)
  return _internal_article_all();
}
inline ::np2ps::ArticleAll* Message::unsafe_arena_release_article_all() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.article_all)
  if (_internal_has_article_all()) {
    clear_has_message_oneof();
    ::np2ps::ArticleAll* temp = _impl_.message_oneof_.article_all_;
    _impl_.message_oneof_.article_all_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_article_all(::np2ps::ArticleAll* article_all) {
  clear_message_oneof();
  if (article_all) {
    set_has_article_all();
    _impl_.message_oneof_.article_all_ = article_all;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.article_all)
}
inline ::np2ps::ArticleAll* Message::_internal_mutable_article_all() {
  if (!_internal_has_article_all()) {
    clear_message_oneof();
    set_has_article_all();
    _impl_.message_oneof_.article_all_ = CreateMaybeMessage< ::np2ps::ArticleAll >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.article_all_;
}
inline ::np2ps::ArticleAll* Message::mutable_article_all() {
  ::np2ps::ArticleAll* _msg = _internal_mutable_article_all();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.article_all)
  return _msg;
}

// .np2ps.ArticleHeader article_header = 120;
inline bool Message::_internal_has_article_header() const {
  return message_oneof_case() == kArticleHeader;
}
inline bool Message::has_article_header() const {
  return _internal_has_article_header();
}
inline void Message::set_has_article_header() {
  _impl_._oneof_case_[0] = kArticleHeader;
}
inline void Message::clear_article_header() {
  if (_internal_has_article_header()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.article_header_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::ArticleHeader* Message::release_article_header() {
  // @@protoc_insertion_point(field_release:np2ps.Message.article_header)
  if (_internal_has_article_header()) {
    clear_has_message_oneof();
    ::np2ps::ArticleHeader* temp = _impl_.message_oneof_.article_header_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.article_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::ArticleHeader& Message::_internal_article_header() const {
  return _internal_has_article_header()
      ? *_impl_.message_oneof_.article_header_
      : reinterpret_cast< ::np2ps::ArticleHeader&>(::np2ps::_ArticleHeader_default_instance_);
}
inline const ::np2ps::ArticleHeader& Message::article_header() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.article_header)
  return _internal_article_header();
}
inline ::np2ps::ArticleHeader* Message::unsafe_arena_release_article_header() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.article_header)
  if (_internal_has_article_header()) {
    clear_has_message_oneof();
    ::np2ps::ArticleHeader* temp = _impl_.message_oneof_.article_header_;
    _impl_.message_oneof_.article_header_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_article_header(::np2ps::ArticleHeader* article_header) {
  clear_message_oneof();
  if (article_header) {
    set_has_article_header();
    _impl_.message_oneof_.article_header_ = article_header;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.article_header)
}
inline ::np2ps::ArticleHeader* Message::_internal_mutable_article_header() {
  if (!_internal_has_article_header()) {
    clear_message_oneof();
    set_has_article_header();
    _impl_.message_oneof_.article_header_ = CreateMaybeMessage< ::np2ps::ArticleHeader >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.article_header_;
}
inline ::np2ps::ArticleHeader* Message::mutable_article_header() {
  ::np2ps::ArticleHeader* _msg = _internal_mutable_article_header();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.article_header)
  return _msg;
}

// .np2ps.ArticleSolicitation article_sol = 121;
inline bool Message::_internal_has_article_sol() const {
  return message_oneof_case() == kArticleSol;
}
inline bool Message::has_article_sol() const {
  return _internal_has_article_sol();
}
inline void Message::set_has_article_sol() {
  _impl_._oneof_case_[0] = kArticleSol;
}
inline void Message::clear_article_sol() {
  if (_internal_has_article_sol()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.article_sol_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::ArticleSolicitation* Message::release_article_sol() {
  // @@protoc_insertion_point(field_release:np2ps.Message.article_sol)
  if (_internal_has_article_sol()) {
    clear_has_message_oneof();
    ::np2ps::ArticleSolicitation* temp = _impl_.message_oneof_.article_sol_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.article_sol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::ArticleSolicitation& Message::_internal_article_sol() const {
  return _internal_has_article_sol()
      ? *_impl_.message_oneof_.article_sol_
      : reinterpret_cast< ::np2ps::ArticleSolicitation&>(::np2ps::_ArticleSolicitation_default_instance_);
}
inline const ::np2ps::ArticleSolicitation& Message::article_sol() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.article_sol)
  return _internal_article_sol();
}
inline ::np2ps::ArticleSolicitation* Message::unsafe_arena_release_article_sol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.article_sol)
  if (_internal_has_article_sol()) {
    clear_has_message_oneof();
    ::np2ps::ArticleSolicitation* temp = _impl_.message_oneof_.article_sol_;
    _impl_.message_oneof_.article_sol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_article_sol(::np2ps::ArticleSolicitation* article_sol) {
  clear_message_oneof();
  if (article_sol) {
    set_has_article_sol();
    _impl_.message_oneof_.article_sol_ = article_sol;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.article_sol)
}
inline ::np2ps::ArticleSolicitation* Message::_internal_mutable_article_sol() {
  if (!_internal_has_article_sol()) {
    clear_message_oneof();
    set_has_article_sol();
    _impl_.message_oneof_.article_sol_ = CreateMaybeMessage< ::np2ps::ArticleSolicitation >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.article_sol_;
}
inline ::np2ps::ArticleSolicitation* Message::mutable_article_sol() {
  ::np2ps::ArticleSolicitation* _msg = _internal_mutable_article_sol();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.article_sol)
  return _msg;
}

// .np2ps.ArticleList article_list = 125;
inline bool Message::_internal_has_article_list() const {
  return message_oneof_case() == kArticleList;
}
inline bool Message::has_article_list() const {
  return _internal_has_article_list();
}
inline void Message::set_has_article_list() {
  _impl_._oneof_case_[0] = kArticleList;
}
inline void Message::clear_article_list() {
  if (_internal_has_article_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.article_list_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::ArticleList* Message::release_article_list() {
  // @@protoc_insertion_point(field_release:np2ps.Message.article_list)
  if (_internal_has_article_list()) {
    clear_has_message_oneof();
    ::np2ps::ArticleList* temp = _impl_.message_oneof_.article_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.article_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::ArticleList& Message::_internal_article_list() const {
  return _internal_has_article_list()
      ? *_impl_.message_oneof_.article_list_
      : reinterpret_cast< ::np2ps::ArticleList&>(::np2ps::_ArticleList_default_instance_);
}
inline const ::np2ps::ArticleList& Message::article_list() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.article_list)
  return _internal_article_list();
}
inline ::np2ps::ArticleList* Message::unsafe_arena_release_article_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.article_list)
  if (_internal_has_article_list()) {
    clear_has_message_oneof();
    ::np2ps::ArticleList* temp = _impl_.message_oneof_.article_list_;
    _impl_.message_oneof_.article_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_article_list(::np2ps::ArticleList* article_list) {
  clear_message_oneof();
  if (article_list) {
    set_has_article_list();
    _impl_.message_oneof_.article_list_ = article_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.article_list)
}
inline ::np2ps::ArticleList* Message::_internal_mutable_article_list() {
  if (!_internal_has_article_list()) {
    clear_message_oneof();
    set_has_article_list();
    _impl_.message_oneof_.article_list_ = CreateMaybeMessage< ::np2ps::ArticleList >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.article_list_;
}
inline ::np2ps::ArticleList* Message::mutable_article_list() {
  ::np2ps::ArticleList* _msg = _internal_mutable_article_list();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.article_list)
  return _msg;
}

// .np2ps.UserIsMember user_is_member = 130;
inline bool Message::_internal_has_user_is_member() const {
  return message_oneof_case() == kUserIsMember;
}
inline bool Message::has_user_is_member() const {
  return _internal_has_user_is_member();
}
inline void Message::set_has_user_is_member() {
  _impl_._oneof_case_[0] = kUserIsMember;
}
inline void Message::clear_user_is_member() {
  if (_internal_has_user_is_member()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.user_is_member_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::UserIsMember* Message::release_user_is_member() {
  // @@protoc_insertion_point(field_release:np2ps.Message.user_is_member)
  if (_internal_has_user_is_member()) {
    clear_has_message_oneof();
    ::np2ps::UserIsMember* temp = _impl_.message_oneof_.user_is_member_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.user_is_member_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::UserIsMember& Message::_internal_user_is_member() const {
  return _internal_has_user_is_member()
      ? *_impl_.message_oneof_.user_is_member_
      : reinterpret_cast< ::np2ps::UserIsMember&>(::np2ps::_UserIsMember_default_instance_);
}
inline const ::np2ps::UserIsMember& Message::user_is_member() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.user_is_member)
  return _internal_user_is_member();
}
inline ::np2ps::UserIsMember* Message::unsafe_arena_release_user_is_member() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.user_is_member)
  if (_internal_has_user_is_member()) {
    clear_has_message_oneof();
    ::np2ps::UserIsMember* temp = _impl_.message_oneof_.user_is_member_;
    _impl_.message_oneof_.user_is_member_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_user_is_member(::np2ps::UserIsMember* user_is_member) {
  clear_message_oneof();
  if (user_is_member) {
    set_has_user_is_member();
    _impl_.message_oneof_.user_is_member_ = user_is_member;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.user_is_member)
}
inline ::np2ps::UserIsMember* Message::_internal_mutable_user_is_member() {
  if (!_internal_has_user_is_member()) {
    clear_message_oneof();
    set_has_user_is_member();
    _impl_.message_oneof_.user_is_member_ = CreateMaybeMessage< ::np2ps::UserIsMember >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.user_is_member_;
}
inline ::np2ps::UserIsMember* Message::mutable_user_is_member() {
  ::np2ps::UserIsMember* _msg = _internal_mutable_user_is_member();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.user_is_member)
  return _msg;
}

// .np2ps.ArticleDataUpdate article_data_update = 140;
inline bool Message::_internal_has_article_data_update() const {
  return message_oneof_case() == kArticleDataUpdate;
}
inline bool Message::has_article_data_update() const {
  return _internal_has_article_data_update();
}
inline void Message::set_has_article_data_update() {
  _impl_._oneof_case_[0] = kArticleDataUpdate;
}
inline void Message::clear_article_data_update() {
  if (_internal_has_article_data_update()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.article_data_update_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::ArticleDataUpdate* Message::release_article_data_update() {
  // @@protoc_insertion_point(field_release:np2ps.Message.article_data_update)
  if (_internal_has_article_data_update()) {
    clear_has_message_oneof();
    ::np2ps::ArticleDataUpdate* temp = _impl_.message_oneof_.article_data_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.article_data_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::ArticleDataUpdate& Message::_internal_article_data_update() const {
  return _internal_has_article_data_update()
      ? *_impl_.message_oneof_.article_data_update_
      : reinterpret_cast< ::np2ps::ArticleDataUpdate&>(::np2ps::_ArticleDataUpdate_default_instance_);
}
inline const ::np2ps::ArticleDataUpdate& Message::article_data_update() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.article_data_update)
  return _internal_article_data_update();
}
inline ::np2ps::ArticleDataUpdate* Message::unsafe_arena_release_article_data_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.article_data_update)
  if (_internal_has_article_data_update()) {
    clear_has_message_oneof();
    ::np2ps::ArticleDataUpdate* temp = _impl_.message_oneof_.article_data_update_;
    _impl_.message_oneof_.article_data_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_article_data_update(::np2ps::ArticleDataUpdate* article_data_update) {
  clear_message_oneof();
  if (article_data_update) {
    set_has_article_data_update();
    _impl_.message_oneof_.article_data_update_ = article_data_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.article_data_update)
}
inline ::np2ps::ArticleDataUpdate* Message::_internal_mutable_article_data_update() {
  if (!_internal_has_article_data_update()) {
    clear_message_oneof();
    set_has_article_data_update();
    _impl_.message_oneof_.article_data_update_ = CreateMaybeMessage< ::np2ps::ArticleDataUpdate >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.article_data_update_;
}
inline ::np2ps::ArticleDataUpdate* Message::mutable_article_data_update() {
  ::np2ps::ArticleDataUpdate* _msg = _internal_mutable_article_data_update();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.article_data_update)
  return _msg;
}

// .np2ps.UpdateMargin update_margin = 170;
inline bool Message::_internal_has_update_margin() const {
  return message_oneof_case() == kUpdateMargin;
}
inline bool Message::has_update_margin() const {
  return _internal_has_update_margin();
}
inline void Message::set_has_update_margin() {
  _impl_._oneof_case_[0] = kUpdateMargin;
}
inline void Message::clear_update_margin() {
  if (_internal_has_update_margin()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.update_margin_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::UpdateMargin* Message::release_update_margin() {
  // @@protoc_insertion_point(field_release:np2ps.Message.update_margin)
  if (_internal_has_update_margin()) {
    clear_has_message_oneof();
    ::np2ps::UpdateMargin* temp = _impl_.message_oneof_.update_margin_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.update_margin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::UpdateMargin& Message::_internal_update_margin() const {
  return _internal_has_update_margin()
      ? *_impl_.message_oneof_.update_margin_
      : reinterpret_cast< ::np2ps::UpdateMargin&>(::np2ps::_UpdateMargin_default_instance_);
}
inline const ::np2ps::UpdateMargin& Message::update_margin() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.update_margin)
  return _internal_update_margin();
}
inline ::np2ps::UpdateMargin* Message::unsafe_arena_release_update_margin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.update_margin)
  if (_internal_has_update_margin()) {
    clear_has_message_oneof();
    ::np2ps::UpdateMargin* temp = _impl_.message_oneof_.update_margin_;
    _impl_.message_oneof_.update_margin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_update_margin(::np2ps::UpdateMargin* update_margin) {
  clear_message_oneof();
  if (update_margin) {
    set_has_update_margin();
    _impl_.message_oneof_.update_margin_ = update_margin;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.update_margin)
}
inline ::np2ps::UpdateMargin* Message::_internal_mutable_update_margin() {
  if (!_internal_has_update_margin()) {
    clear_message_oneof();
    set_has_update_margin();
    _impl_.message_oneof_.update_margin_ = CreateMaybeMessage< ::np2ps::UpdateMargin >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.update_margin_;
}
inline ::np2ps::UpdateMargin* Message::mutable_update_margin() {
  ::np2ps::UpdateMargin* _msg = _internal_mutable_update_margin();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.update_margin)
  return _msg;
}

// .np2ps.UpdateArticle update_article = 180;
inline bool Message::_internal_has_update_article() const {
  return message_oneof_case() == kUpdateArticle;
}
inline bool Message::has_update_article() const {
  return _internal_has_update_article();
}
inline void Message::set_has_update_article() {
  _impl_._oneof_case_[0] = kUpdateArticle;
}
inline void Message::clear_update_article() {
  if (_internal_has_update_article()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.update_article_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::UpdateArticle* Message::release_update_article() {
  // @@protoc_insertion_point(field_release:np2ps.Message.update_article)
  if (_internal_has_update_article()) {
    clear_has_message_oneof();
    ::np2ps::UpdateArticle* temp = _impl_.message_oneof_.update_article_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.update_article_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::UpdateArticle& Message::_internal_update_article() const {
  return _internal_has_update_article()
      ? *_impl_.message_oneof_.update_article_
      : reinterpret_cast< ::np2ps::UpdateArticle&>(::np2ps::_UpdateArticle_default_instance_);
}
inline const ::np2ps::UpdateArticle& Message::update_article() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.update_article)
  return _internal_update_article();
}
inline ::np2ps::UpdateArticle* Message::unsafe_arena_release_update_article() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.update_article)
  if (_internal_has_update_article()) {
    clear_has_message_oneof();
    ::np2ps::UpdateArticle* temp = _impl_.message_oneof_.update_article_;
    _impl_.message_oneof_.update_article_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_update_article(::np2ps::UpdateArticle* update_article) {
  clear_message_oneof();
  if (update_article) {
    set_has_update_article();
    _impl_.message_oneof_.update_article_ = update_article;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.update_article)
}
inline ::np2ps::UpdateArticle* Message::_internal_mutable_update_article() {
  if (!_internal_has_update_article()) {
    clear_message_oneof();
    set_has_update_article();
    _impl_.message_oneof_.update_article_ = CreateMaybeMessage< ::np2ps::UpdateArticle >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.update_article_;
}
inline ::np2ps::UpdateArticle* Message::mutable_update_article() {
  ::np2ps::UpdateArticle* _msg = _internal_mutable_update_article();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.update_article)
  return _msg;
}

// .np2ps.Credentials credentials = 200;
inline bool Message::_internal_has_credentials() const {
  return message_oneof_case() == kCredentials;
}
inline bool Message::has_credentials() const {
  return _internal_has_credentials();
}
inline void Message::set_has_credentials() {
  _impl_._oneof_case_[0] = kCredentials;
}
inline void Message::clear_credentials() {
  if (_internal_has_credentials()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.credentials_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::Credentials* Message::release_credentials() {
  // @@protoc_insertion_point(field_release:np2ps.Message.credentials)
  if (_internal_has_credentials()) {
    clear_has_message_oneof();
    ::np2ps::Credentials* temp = _impl_.message_oneof_.credentials_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.credentials_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::Credentials& Message::_internal_credentials() const {
  return _internal_has_credentials()
      ? *_impl_.message_oneof_.credentials_
      : reinterpret_cast< ::np2ps::Credentials&>(::np2ps::_Credentials_default_instance_);
}
inline const ::np2ps::Credentials& Message::credentials() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.credentials)
  return _internal_credentials();
}
inline ::np2ps::Credentials* Message::unsafe_arena_release_credentials() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.credentials)
  if (_internal_has_credentials()) {
    clear_has_message_oneof();
    ::np2ps::Credentials* temp = _impl_.message_oneof_.credentials_;
    _impl_.message_oneof_.credentials_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_credentials(::np2ps::Credentials* credentials) {
  clear_message_oneof();
  if (credentials) {
    set_has_credentials();
    _impl_.message_oneof_.credentials_ = credentials;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.credentials)
}
inline ::np2ps::Credentials* Message::_internal_mutable_credentials() {
  if (!_internal_has_credentials()) {
    clear_message_oneof();
    set_has_credentials();
    _impl_.message_oneof_.credentials_ = CreateMaybeMessage< ::np2ps::Credentials >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.credentials_;
}
inline ::np2ps::Credentials* Message::mutable_credentials() {
  ::np2ps::Credentials* _msg = _internal_mutable_credentials();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.credentials)
  return _msg;
}

// .np2ps.SymmetricKey symmetric_key = 210;
inline bool Message::_internal_has_symmetric_key() const {
  return message_oneof_case() == kSymmetricKey;
}
inline bool Message::has_symmetric_key() const {
  return _internal_has_symmetric_key();
}
inline void Message::set_has_symmetric_key() {
  _impl_._oneof_case_[0] = kSymmetricKey;
}
inline void Message::clear_symmetric_key() {
  if (_internal_has_symmetric_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.symmetric_key_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::SymmetricKey* Message::release_symmetric_key() {
  // @@protoc_insertion_point(field_release:np2ps.Message.symmetric_key)
  if (_internal_has_symmetric_key()) {
    clear_has_message_oneof();
    ::np2ps::SymmetricKey* temp = _impl_.message_oneof_.symmetric_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.symmetric_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::SymmetricKey& Message::_internal_symmetric_key() const {
  return _internal_has_symmetric_key()
      ? *_impl_.message_oneof_.symmetric_key_
      : reinterpret_cast< ::np2ps::SymmetricKey&>(::np2ps::_SymmetricKey_default_instance_);
}
inline const ::np2ps::SymmetricKey& Message::symmetric_key() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.symmetric_key)
  return _internal_symmetric_key();
}
inline ::np2ps::SymmetricKey* Message::unsafe_arena_release_symmetric_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.symmetric_key)
  if (_internal_has_symmetric_key()) {
    clear_has_message_oneof();
    ::np2ps::SymmetricKey* temp = _impl_.message_oneof_.symmetric_key_;
    _impl_.message_oneof_.symmetric_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_symmetric_key(::np2ps::SymmetricKey* symmetric_key) {
  clear_message_oneof();
  if (symmetric_key) {
    set_has_symmetric_key();
    _impl_.message_oneof_.symmetric_key_ = symmetric_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.symmetric_key)
}
inline ::np2ps::SymmetricKey* Message::_internal_mutable_symmetric_key() {
  if (!_internal_has_symmetric_key()) {
    clear_message_oneof();
    set_has_symmetric_key();
    _impl_.message_oneof_.symmetric_key_ = CreateMaybeMessage< ::np2ps::SymmetricKey >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.symmetric_key_;
}
inline ::np2ps::SymmetricKey* Message::mutable_symmetric_key() {
  ::np2ps::SymmetricKey* _msg = _internal_mutable_symmetric_key();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.symmetric_key)
  return _msg;
}

// .np2ps.PublicKey public_key = 220;
inline bool Message::_internal_has_public_key() const {
  return message_oneof_case() == kPublicKey;
}
inline bool Message::has_public_key() const {
  return _internal_has_public_key();
}
inline void Message::set_has_public_key() {
  _impl_._oneof_case_[0] = kPublicKey;
}
inline void Message::clear_public_key() {
  if (_internal_has_public_key()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.message_oneof_.public_key_;
    }
    clear_has_message_oneof();
  }
}
inline ::np2ps::PublicKey* Message::release_public_key() {
  // @@protoc_insertion_point(field_release:np2ps.Message.public_key)
  if (_internal_has_public_key()) {
    clear_has_message_oneof();
    ::np2ps::PublicKey* temp = _impl_.message_oneof_.public_key_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.message_oneof_.public_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::np2ps::PublicKey& Message::_internal_public_key() const {
  return _internal_has_public_key()
      ? *_impl_.message_oneof_.public_key_
      : reinterpret_cast< ::np2ps::PublicKey&>(::np2ps::_PublicKey_default_instance_);
}
inline const ::np2ps::PublicKey& Message::public_key() const {
  // @@protoc_insertion_point(field_get:np2ps.Message.public_key)
  return _internal_public_key();
}
inline ::np2ps::PublicKey* Message::unsafe_arena_release_public_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:np2ps.Message.public_key)
  if (_internal_has_public_key()) {
    clear_has_message_oneof();
    ::np2ps::PublicKey* temp = _impl_.message_oneof_.public_key_;
    _impl_.message_oneof_.public_key_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_public_key(::np2ps::PublicKey* public_key) {
  clear_message_oneof();
  if (public_key) {
    set_has_public_key();
    _impl_.message_oneof_.public_key_ = public_key;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.Message.public_key)
}
inline ::np2ps::PublicKey* Message::_internal_mutable_public_key() {
  if (!_internal_has_public_key()) {
    clear_message_oneof();
    set_has_public_key();
    _impl_.message_oneof_.public_key_ = CreateMaybeMessage< ::np2ps::PublicKey >(GetArenaForAllocation());
  }
  return _impl_.message_oneof_.public_key_;
}
inline ::np2ps::PublicKey* Message::mutable_public_key() {
  ::np2ps::PublicKey* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:np2ps.Message.public_key)
  return _msg;
}

inline bool Message::has_message_oneof() const {
  return message_oneof_case() != MESSAGE_ONEOF_NOT_SET;
}
inline void Message::clear_has_message_oneof() {
  _impl_._oneof_case_[0] = MESSAGE_ONEOF_NOT_SET;
}
inline Message::MessageOneofCase Message::message_oneof_case() const {
  return Message::MessageOneofCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// ArticleAll

// uint64 article_hash = 1;
inline void ArticleAll::clear_article_hash() {
  _impl_.article_hash_ = uint64_t{0u};
}
inline uint64_t ArticleAll::_internal_article_hash() const {
  return _impl_.article_hash_;
}
inline uint64_t ArticleAll::article_hash() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleAll.article_hash)
  return _internal_article_hash();
}
inline void ArticleAll::_internal_set_article_hash(uint64_t value) {
  
  _impl_.article_hash_ = value;
}
inline void ArticleAll::set_article_hash(uint64_t value) {
  _internal_set_article_hash(value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleAll.article_hash)
}

// uint32 level = 2;
inline void ArticleAll::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t ArticleAll::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t ArticleAll::level() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleAll.level)
  return _internal_level();
}
inline void ArticleAll::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void ArticleAll::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleAll.level)
}

// optional .np2ps.Article header = 3;
inline bool ArticleAll::_internal_has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline bool ArticleAll::has_header() const {
  return _internal_has_header();
}
inline const ::np2ps::Article& ArticleAll::_internal_header() const {
  const ::np2ps::Article* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::np2ps::Article&>(
      ::np2ps::_Article_default_instance_);
}
inline const ::np2ps::Article& ArticleAll::header() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleAll.header)
  return _internal_header();
}
inline void ArticleAll::unsafe_arena_set_allocated_header(
    ::np2ps::Article* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.ArticleAll.header)
}
inline ::np2ps::Article* ArticleAll::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::np2ps::Article* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::np2ps::Article* ArticleAll::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:np2ps.ArticleAll.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::np2ps::Article* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::np2ps::Article* ArticleAll::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::np2ps::Article>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::np2ps::Article* ArticleAll::mutable_header() {
  ::np2ps::Article* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:np2ps.ArticleAll.header)
  return _msg;
}
inline void ArticleAll::set_allocated_header(::np2ps::Article* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header));
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:np2ps.ArticleAll.header)
}

// optional string article_actual = 4;
inline bool ArticleAll::_internal_has_article_actual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArticleAll::has_article_actual() const {
  return _internal_has_article_actual();
}
inline void ArticleAll::clear_article_actual() {
  _impl_.article_actual_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ArticleAll::article_actual() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleAll.article_actual)
  return _internal_article_actual();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ArticleAll::set_article_actual(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.article_actual_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.ArticleAll.article_actual)
}
inline std::string* ArticleAll::mutable_article_actual() {
  std::string* _s = _internal_mutable_article_actual();
  // @@protoc_insertion_point(field_mutable:np2ps.ArticleAll.article_actual)
  return _s;
}
inline const std::string& ArticleAll::_internal_article_actual() const {
  return _impl_.article_actual_.Get();
}
inline void ArticleAll::_internal_set_article_actual(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.article_actual_.Set(value, GetArenaForAllocation());
}
inline std::string* ArticleAll::_internal_mutable_article_actual() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.article_actual_.Mutable(GetArenaForAllocation());
}
inline std::string* ArticleAll::release_article_actual() {
  // @@protoc_insertion_point(field_release:np2ps.ArticleAll.article_actual)
  if (!_internal_has_article_actual()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.article_actual_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.article_actual_.IsDefault()) {
    _impl_.article_actual_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ArticleAll::set_allocated_article_actual(std::string* article_actual) {
  if (article_actual != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.article_actual_.SetAllocated(article_actual, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.article_actual_.IsDefault()) {
    _impl_.article_actual_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.ArticleAll.article_actual)
}

// -------------------------------------------------------------------

// ArticleHeader

// uint64 article_hash = 2;
inline void ArticleHeader::clear_article_hash() {
  _impl_.article_hash_ = uint64_t{0u};
}
inline uint64_t ArticleHeader::_internal_article_hash() const {
  return _impl_.article_hash_;
}
inline uint64_t ArticleHeader::article_hash() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleHeader.article_hash)
  return _internal_article_hash();
}
inline void ArticleHeader::_internal_set_article_hash(uint64_t value) {
  
  _impl_.article_hash_ = value;
}
inline void ArticleHeader::set_article_hash(uint64_t value) {
  _internal_set_article_hash(value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleHeader.article_hash)
}

// optional .np2ps.Article article = 4;
inline bool ArticleHeader::_internal_has_article() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.article_ != nullptr);
  return value;
}
inline bool ArticleHeader::has_article() const {
  return _internal_has_article();
}
inline const ::np2ps::Article& ArticleHeader::_internal_article() const {
  const ::np2ps::Article* p = _impl_.article_;
  return p != nullptr ? *p : reinterpret_cast<const ::np2ps::Article&>(
      ::np2ps::_Article_default_instance_);
}
inline const ::np2ps::Article& ArticleHeader::article() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleHeader.article)
  return _internal_article();
}
inline void ArticleHeader::unsafe_arena_set_allocated_article(
    ::np2ps::Article* article) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.article_);
  }
  _impl_.article_ = article;
  if (article) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.ArticleHeader.article)
}
inline ::np2ps::Article* ArticleHeader::release_article() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::np2ps::Article* temp = _impl_.article_;
  _impl_.article_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::np2ps::Article* ArticleHeader::unsafe_arena_release_article() {
  // @@protoc_insertion_point(field_release:np2ps.ArticleHeader.article)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::np2ps::Article* temp = _impl_.article_;
  _impl_.article_ = nullptr;
  return temp;
}
inline ::np2ps::Article* ArticleHeader::_internal_mutable_article() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.article_ == nullptr) {
    auto* p = CreateMaybeMessage<::np2ps::Article>(GetArenaForAllocation());
    _impl_.article_ = p;
  }
  return _impl_.article_;
}
inline ::np2ps::Article* ArticleHeader::mutable_article() {
  ::np2ps::Article* _msg = _internal_mutable_article();
  // @@protoc_insertion_point(field_mutable:np2ps.ArticleHeader.article)
  return _msg;
}
inline void ArticleHeader::set_allocated_article(::np2ps::Article* article) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.article_);
  }
  if (article) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(article));
    if (message_arena != submessage_arena) {
      article = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, article, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.article_ = article;
  // @@protoc_insertion_point(field_set_allocated:np2ps.ArticleHeader.article)
}

// -------------------------------------------------------------------

// ArticleList

// bool all_articles = 1;
inline void ArticleList::clear_all_articles() {
  _impl_.all_articles_ = false;
}
inline bool ArticleList::_internal_all_articles() const {
  return _impl_.all_articles_;
}
inline bool ArticleList::all_articles() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleList.all_articles)
  return _internal_all_articles();
}
inline void ArticleList::_internal_set_all_articles(bool value) {
  
  _impl_.all_articles_ = value;
}
inline void ArticleList::set_all_articles(bool value) {
  _internal_set_all_articles(value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleList.all_articles)
}

// repeated string categories = 2;
inline int ArticleList::_internal_categories_size() const {
  return _impl_.categories_.size();
}
inline int ArticleList::categories_size() const {
  return _internal_categories_size();
}
inline void ArticleList::clear_categories() {
  _impl_.categories_.Clear();
}
inline std::string* ArticleList::add_categories() {
  std::string* _s = _internal_add_categories();
  // @@protoc_insertion_point(field_add_mutable:np2ps.ArticleList.categories)
  return _s;
}
inline const std::string& ArticleList::_internal_categories(int index) const {
  return _impl_.categories_.Get(index);
}
inline const std::string& ArticleList::categories(int index) const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleList.categories)
  return _internal_categories(index);
}
inline std::string* ArticleList::mutable_categories(int index) {
  // @@protoc_insertion_point(field_mutable:np2ps.ArticleList.categories)
  return _impl_.categories_.Mutable(index);
}
inline void ArticleList::set_categories(int index, const std::string& value) {
  _impl_.categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleList.categories)
}
inline void ArticleList::set_categories(int index, std::string&& value) {
  _impl_.categories_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:np2ps.ArticleList.categories)
}
inline void ArticleList::set_categories(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.categories_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:np2ps.ArticleList.categories)
}
inline void ArticleList::set_categories(int index, const char* value, size_t size) {
  _impl_.categories_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:np2ps.ArticleList.categories)
}
inline std::string* ArticleList::_internal_add_categories() {
  return _impl_.categories_.Add();
}
inline void ArticleList::add_categories(const std::string& value) {
  _impl_.categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:np2ps.ArticleList.categories)
}
inline void ArticleList::add_categories(std::string&& value) {
  _impl_.categories_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:np2ps.ArticleList.categories)
}
inline void ArticleList::add_categories(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.categories_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:np2ps.ArticleList.categories)
}
inline void ArticleList::add_categories(const char* value, size_t size) {
  _impl_.categories_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:np2ps.ArticleList.categories)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ArticleList::categories() const {
  // @@protoc_insertion_point(field_list:np2ps.ArticleList.categories)
  return _impl_.categories_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ArticleList::mutable_categories() {
  // @@protoc_insertion_point(field_mutable_list:np2ps.ArticleList.categories)
  return &_impl_.categories_;
}

// int32 count = 4;
inline void ArticleList::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t ArticleList::_internal_count() const {
  return _impl_.count_;
}
inline int32_t ArticleList::count() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleList.count)
  return _internal_count();
}
inline void ArticleList::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void ArticleList::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleList.count)
}

// repeated .np2ps.Article response = 3;
inline int ArticleList::_internal_response_size() const {
  return _impl_.response_.size();
}
inline int ArticleList::response_size() const {
  return _internal_response_size();
}
inline ::np2ps::Article* ArticleList::mutable_response(int index) {
  // @@protoc_insertion_point(field_mutable:np2ps.ArticleList.response)
  return _impl_.response_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::Article >*
ArticleList::mutable_response() {
  // @@protoc_insertion_point(field_mutable_list:np2ps.ArticleList.response)
  return &_impl_.response_;
}
inline const ::np2ps::Article& ArticleList::_internal_response(int index) const {
  return _impl_.response_.Get(index);
}
inline const ::np2ps::Article& ArticleList::response(int index) const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleList.response)
  return _internal_response(index);
}
inline ::np2ps::Article* ArticleList::_internal_add_response() {
  return _impl_.response_.Add();
}
inline ::np2ps::Article* ArticleList::add_response() {
  ::np2ps::Article* _add = _internal_add_response();
  // @@protoc_insertion_point(field_add:np2ps.ArticleList.response)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::np2ps::Article >&
ArticleList::response() const {
  // @@protoc_insertion_point(field_list:np2ps.ArticleList.response)
  return _impl_.response_;
}

// -------------------------------------------------------------------

// ArticleSolicitation

// uint64 article_hash = 1;
inline void ArticleSolicitation::clear_article_hash() {
  _impl_.article_hash_ = uint64_t{0u};
}
inline uint64_t ArticleSolicitation::_internal_article_hash() const {
  return _impl_.article_hash_;
}
inline uint64_t ArticleSolicitation::article_hash() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleSolicitation.article_hash)
  return _internal_article_hash();
}
inline void ArticleSolicitation::_internal_set_article_hash(uint64_t value) {
  
  _impl_.article_hash_ = value;
}
inline void ArticleSolicitation::set_article_hash(uint64_t value) {
  _internal_set_article_hash(value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleSolicitation.article_hash)
}

// repeated uint64 possible_owners = 2;
inline int ArticleSolicitation::_internal_possible_owners_size() const {
  return _impl_.possible_owners_.size();
}
inline int ArticleSolicitation::possible_owners_size() const {
  return _internal_possible_owners_size();
}
inline void ArticleSolicitation::clear_possible_owners() {
  _impl_.possible_owners_.Clear();
}
inline uint64_t ArticleSolicitation::_internal_possible_owners(int index) const {
  return _impl_.possible_owners_.Get(index);
}
inline uint64_t ArticleSolicitation::possible_owners(int index) const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleSolicitation.possible_owners)
  return _internal_possible_owners(index);
}
inline void ArticleSolicitation::set_possible_owners(int index, uint64_t value) {
  _impl_.possible_owners_.Set(index, value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleSolicitation.possible_owners)
}
inline void ArticleSolicitation::_internal_add_possible_owners(uint64_t value) {
  _impl_.possible_owners_.Add(value);
}
inline void ArticleSolicitation::add_possible_owners(uint64_t value) {
  _internal_add_possible_owners(value);
  // @@protoc_insertion_point(field_add:np2ps.ArticleSolicitation.possible_owners)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ArticleSolicitation::_internal_possible_owners() const {
  return _impl_.possible_owners_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ArticleSolicitation::possible_owners() const {
  // @@protoc_insertion_point(field_list:np2ps.ArticleSolicitation.possible_owners)
  return _internal_possible_owners();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ArticleSolicitation::_internal_mutable_possible_owners() {
  return &_impl_.possible_owners_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ArticleSolicitation::mutable_possible_owners() {
  // @@protoc_insertion_point(field_mutable_list:np2ps.ArticleSolicitation.possible_owners)
  return _internal_mutable_possible_owners();
}

// optional uint32 level = 3;
inline bool ArticleSolicitation::_internal_has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ArticleSolicitation::has_level() const {
  return _internal_has_level();
}
inline void ArticleSolicitation::clear_level() {
  _impl_.level_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t ArticleSolicitation::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t ArticleSolicitation::level() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleSolicitation.level)
  return _internal_level();
}
inline void ArticleSolicitation::_internal_set_level(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.level_ = value;
}
inline void ArticleSolicitation::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleSolicitation.level)
}

// -------------------------------------------------------------------

// UserIsMember

// uint64 user_pk = 1;
inline void UserIsMember::clear_user_pk() {
  _impl_.user_pk_ = uint64_t{0u};
}
inline uint64_t UserIsMember::_internal_user_pk() const {
  return _impl_.user_pk_;
}
inline uint64_t UserIsMember::user_pk() const {
  // @@protoc_insertion_point(field_get:np2ps.UserIsMember.user_pk)
  return _internal_user_pk();
}
inline void UserIsMember::_internal_set_user_pk(uint64_t value) {
  
  _impl_.user_pk_ = value;
}
inline void UserIsMember::set_user_pk(uint64_t value) {
  _internal_set_user_pk(value);
  // @@protoc_insertion_point(field_set:np2ps.UserIsMember.user_pk)
}

// uint32 level = 2;
inline void UserIsMember::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t UserIsMember::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t UserIsMember::level() const {
  // @@protoc_insertion_point(field_get:np2ps.UserIsMember.level)
  return _internal_level();
}
inline void UserIsMember::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void UserIsMember::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:np2ps.UserIsMember.level)
}

// bool is_member = 3;
inline void UserIsMember::clear_is_member() {
  _impl_.is_member_ = false;
}
inline bool UserIsMember::_internal_is_member() const {
  return _impl_.is_member_;
}
inline bool UserIsMember::is_member() const {
  // @@protoc_insertion_point(field_get:np2ps.UserIsMember.is_member)
  return _internal_is_member();
}
inline void UserIsMember::_internal_set_is_member(bool value) {
  
  _impl_.is_member_ = value;
}
inline void UserIsMember::set_is_member(bool value) {
  _internal_set_is_member(value);
  // @@protoc_insertion_point(field_set:np2ps.UserIsMember.is_member)
}

// -------------------------------------------------------------------

// ArticleDataUpdate

// uint64 article_pk = 1;
inline void ArticleDataUpdate::clear_article_pk() {
  _impl_.article_pk_ = uint64_t{0u};
}
inline uint64_t ArticleDataUpdate::_internal_article_pk() const {
  return _impl_.article_pk_;
}
inline uint64_t ArticleDataUpdate::article_pk() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleDataUpdate.article_pk)
  return _internal_article_pk();
}
inline void ArticleDataUpdate::_internal_set_article_pk(uint64_t value) {
  
  _impl_.article_pk_ = value;
}
inline void ArticleDataUpdate::set_article_pk(uint64_t value) {
  _internal_set_article_pk(value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleDataUpdate.article_pk)
}

// .np2ps.ArticleAction article_action = 3;
inline void ArticleDataUpdate::clear_article_action() {
  _impl_.article_action_ = 0;
}
inline ::np2ps::ArticleAction ArticleDataUpdate::_internal_article_action() const {
  return static_cast< ::np2ps::ArticleAction >(_impl_.article_action_);
}
inline ::np2ps::ArticleAction ArticleDataUpdate::article_action() const {
  // @@protoc_insertion_point(field_get:np2ps.ArticleDataUpdate.article_action)
  return _internal_article_action();
}
inline void ArticleDataUpdate::_internal_set_article_action(::np2ps::ArticleAction value) {
  
  _impl_.article_action_ = value;
}
inline void ArticleDataUpdate::set_article_action(::np2ps::ArticleAction value) {
  _internal_set_article_action(value);
  // @@protoc_insertion_point(field_set:np2ps.ArticleDataUpdate.article_action)
}

// -------------------------------------------------------------------

// UpdateMargin

// uint64 article_pk = 1;
inline void UpdateMargin::clear_article_pk() {
  _impl_.article_pk_ = uint64_t{0u};
}
inline uint64_t UpdateMargin::_internal_article_pk() const {
  return _impl_.article_pk_;
}
inline uint64_t UpdateMargin::article_pk() const {
  // @@protoc_insertion_point(field_get:np2ps.UpdateMargin.article_pk)
  return _internal_article_pk();
}
inline void UpdateMargin::_internal_set_article_pk(uint64_t value) {
  
  _impl_.article_pk_ = value;
}
inline void UpdateMargin::set_article_pk(uint64_t value) {
  _internal_set_article_pk(value);
  // @@protoc_insertion_point(field_set:np2ps.UpdateMargin.article_pk)
}

// .np2ps.MarginAction m_action = 2;
inline void UpdateMargin::clear_m_action() {
  _impl_.m_action_ = 0;
}
inline ::np2ps::MarginAction UpdateMargin::_internal_m_action() const {
  return static_cast< ::np2ps::MarginAction >(_impl_.m_action_);
}
inline ::np2ps::MarginAction UpdateMargin::m_action() const {
  // @@protoc_insertion_point(field_get:np2ps.UpdateMargin.m_action)
  return _internal_m_action();
}
inline void UpdateMargin::_internal_set_m_action(::np2ps::MarginAction value) {
  
  _impl_.m_action_ = value;
}
inline void UpdateMargin::set_m_action(::np2ps::MarginAction value) {
  _internal_set_m_action(value);
  // @@protoc_insertion_point(field_set:np2ps.UpdateMargin.m_action)
}

// .np2ps.Margins margin = 3;
inline bool UpdateMargin::_internal_has_margin() const {
  return this != internal_default_instance() && _impl_.margin_ != nullptr;
}
inline bool UpdateMargin::has_margin() const {
  return _internal_has_margin();
}
inline const ::np2ps::Margins& UpdateMargin::_internal_margin() const {
  const ::np2ps::Margins* p = _impl_.margin_;
  return p != nullptr ? *p : reinterpret_cast<const ::np2ps::Margins&>(
      ::np2ps::_Margins_default_instance_);
}
inline const ::np2ps::Margins& UpdateMargin::margin() const {
  // @@protoc_insertion_point(field_get:np2ps.UpdateMargin.margin)
  return _internal_margin();
}
inline void UpdateMargin::unsafe_arena_set_allocated_margin(
    ::np2ps::Margins* margin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.margin_);
  }
  _impl_.margin_ = margin;
  if (margin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:np2ps.UpdateMargin.margin)
}
inline ::np2ps::Margins* UpdateMargin::release_margin() {
  
  ::np2ps::Margins* temp = _impl_.margin_;
  _impl_.margin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::np2ps::Margins* UpdateMargin::unsafe_arena_release_margin() {
  // @@protoc_insertion_point(field_release:np2ps.UpdateMargin.margin)
  
  ::np2ps::Margins* temp = _impl_.margin_;
  _impl_.margin_ = nullptr;
  return temp;
}
inline ::np2ps::Margins* UpdateMargin::_internal_mutable_margin() {
  
  if (_impl_.margin_ == nullptr) {
    auto* p = CreateMaybeMessage<::np2ps::Margins>(GetArenaForAllocation());
    _impl_.margin_ = p;
  }
  return _impl_.margin_;
}
inline ::np2ps::Margins* UpdateMargin::mutable_margin() {
  ::np2ps::Margins* _msg = _internal_mutable_margin();
  // @@protoc_insertion_point(field_mutable:np2ps.UpdateMargin.margin)
  return _msg;
}
inline void UpdateMargin::set_allocated_margin(::np2ps::Margins* margin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.margin_);
  }
  if (margin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(margin));
    if (message_arena != submessage_arena) {
      margin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, margin, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.margin_ = margin;
  // @@protoc_insertion_point(field_set_allocated:np2ps.UpdateMargin.margin)
}

// -------------------------------------------------------------------

// UpdateArticle

// uint64 article_pk = 1;
inline void UpdateArticle::clear_article_pk() {
  _impl_.article_pk_ = uint64_t{0u};
}
inline uint64_t UpdateArticle::_internal_article_pk() const {
  return _impl_.article_pk_;
}
inline uint64_t UpdateArticle::article_pk() const {
  // @@protoc_insertion_point(field_get:np2ps.UpdateArticle.article_pk)
  return _internal_article_pk();
}
inline void UpdateArticle::_internal_set_article_pk(uint64_t value) {
  
  _impl_.article_pk_ = value;
}
inline void UpdateArticle::set_article_pk(uint64_t value) {
  _internal_set_article_pk(value);
  // @@protoc_insertion_point(field_set:np2ps.UpdateArticle.article_pk)
}

// -------------------------------------------------------------------

// Credentials

// bool req_ipv4 = 5;
inline void Credentials::clear_req_ipv4() {
  _impl_.req_ipv4_ = false;
}
inline bool Credentials::_internal_req_ipv4() const {
  return _impl_.req_ipv4_;
}
inline bool Credentials::req_ipv4() const {
  // @@protoc_insertion_point(field_get:np2ps.Credentials.req_ipv4)
  return _internal_req_ipv4();
}
inline void Credentials::_internal_set_req_ipv4(bool value) {
  
  _impl_.req_ipv4_ = value;
}
inline void Credentials::set_req_ipv4(bool value) {
  _internal_set_req_ipv4(value);
  // @@protoc_insertion_point(field_set:np2ps.Credentials.req_ipv4)
}

// bool req_ipv6 = 6;
inline void Credentials::clear_req_ipv6() {
  _impl_.req_ipv6_ = false;
}
inline bool Credentials::_internal_req_ipv6() const {
  return _impl_.req_ipv6_;
}
inline bool Credentials::req_ipv6() const {
  // @@protoc_insertion_point(field_get:np2ps.Credentials.req_ipv6)
  return _internal_req_ipv6();
}
inline void Credentials::_internal_set_req_ipv6(bool value) {
  
  _impl_.req_ipv6_ = value;
}
inline void Credentials::set_req_ipv6(bool value) {
  _internal_set_req_ipv6(value);
  // @@protoc_insertion_point(field_set:np2ps.Credentials.req_ipv6)
}

// bool req_rsa_public_key = 7;
inline void Credentials::clear_req_rsa_public_key() {
  _impl_.req_rsa_public_key_ = false;
}
inline bool Credentials::_internal_req_rsa_public_key() const {
  return _impl_.req_rsa_public_key_;
}
inline bool Credentials::req_rsa_public_key() const {
  // @@protoc_insertion_point(field_get:np2ps.Credentials.req_rsa_public_key)
  return _internal_req_rsa_public_key();
}
inline void Credentials::_internal_set_req_rsa_public_key(bool value) {
  
  _impl_.req_rsa_public_key_ = value;
}
inline void Credentials::set_req_rsa_public_key(bool value) {
  _internal_set_req_rsa_public_key(value);
  // @@protoc_insertion_point(field_set:np2ps.Credentials.req_rsa_public_key)
}

// bool req_eax_key = 8;
inline void Credentials::clear_req_eax_key() {
  _impl_.req_eax_key_ = false;
}
inline bool Credentials::_internal_req_eax_key() const {
  return _impl_.req_eax_key_;
}
inline bool Credentials::req_eax_key() const {
  // @@protoc_insertion_point(field_get:np2ps.Credentials.req_eax_key)
  return _internal_req_eax_key();
}
inline void Credentials::_internal_set_req_eax_key(bool value) {
  
  _impl_.req_eax_key_ = value;
}
inline void Credentials::set_req_eax_key(bool value) {
  _internal_set_req_eax_key(value);
  // @@protoc_insertion_point(field_set:np2ps.Credentials.req_eax_key)
}

// optional string ipv4 = 1;
inline bool Credentials::_internal_has_ipv4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Credentials::has_ipv4() const {
  return _internal_has_ipv4();
}
inline void Credentials::clear_ipv4() {
  _impl_.ipv4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Credentials::ipv4() const {
  // @@protoc_insertion_point(field_get:np2ps.Credentials.ipv4)
  return _internal_ipv4();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Credentials::set_ipv4(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ipv4_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.Credentials.ipv4)
}
inline std::string* Credentials::mutable_ipv4() {
  std::string* _s = _internal_mutable_ipv4();
  // @@protoc_insertion_point(field_mutable:np2ps.Credentials.ipv4)
  return _s;
}
inline const std::string& Credentials::_internal_ipv4() const {
  return _impl_.ipv4_.Get();
}
inline void Credentials::_internal_set_ipv4(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ipv4_.Set(value, GetArenaForAllocation());
}
inline std::string* Credentials::_internal_mutable_ipv4() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ipv4_.Mutable(GetArenaForAllocation());
}
inline std::string* Credentials::release_ipv4() {
  // @@protoc_insertion_point(field_release:np2ps.Credentials.ipv4)
  if (!_internal_has_ipv4()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ipv4_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ipv4_.IsDefault()) {
    _impl_.ipv4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Credentials::set_allocated_ipv4(std::string* ipv4) {
  if (ipv4 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ipv4_.SetAllocated(ipv4, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ipv4_.IsDefault()) {
    _impl_.ipv4_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.Credentials.ipv4)
}

// optional string ipv6 = 2;
inline bool Credentials::_internal_has_ipv6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Credentials::has_ipv6() const {
  return _internal_has_ipv6();
}
inline void Credentials::clear_ipv6() {
  _impl_.ipv6_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Credentials::ipv6() const {
  // @@protoc_insertion_point(field_get:np2ps.Credentials.ipv6)
  return _internal_ipv6();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Credentials::set_ipv6(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.ipv6_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.Credentials.ipv6)
}
inline std::string* Credentials::mutable_ipv6() {
  std::string* _s = _internal_mutable_ipv6();
  // @@protoc_insertion_point(field_mutable:np2ps.Credentials.ipv6)
  return _s;
}
inline const std::string& Credentials::_internal_ipv6() const {
  return _impl_.ipv6_.Get();
}
inline void Credentials::_internal_set_ipv6(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ipv6_.Set(value, GetArenaForAllocation());
}
inline std::string* Credentials::_internal_mutable_ipv6() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.ipv6_.Mutable(GetArenaForAllocation());
}
inline std::string* Credentials::release_ipv6() {
  // @@protoc_insertion_point(field_release:np2ps.Credentials.ipv6)
  if (!_internal_has_ipv6()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.ipv6_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ipv6_.IsDefault()) {
    _impl_.ipv6_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Credentials::set_allocated_ipv6(std::string* ipv6) {
  if (ipv6 != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.ipv6_.SetAllocated(ipv6, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ipv6_.IsDefault()) {
    _impl_.ipv6_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.Credentials.ipv6)
}

// optional string rsa_public_key = 3;
inline bool Credentials::_internal_has_rsa_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Credentials::has_rsa_public_key() const {
  return _internal_has_rsa_public_key();
}
inline void Credentials::clear_rsa_public_key() {
  _impl_.rsa_public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Credentials::rsa_public_key() const {
  // @@protoc_insertion_point(field_get:np2ps.Credentials.rsa_public_key)
  return _internal_rsa_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Credentials::set_rsa_public_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.rsa_public_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.Credentials.rsa_public_key)
}
inline std::string* Credentials::mutable_rsa_public_key() {
  std::string* _s = _internal_mutable_rsa_public_key();
  // @@protoc_insertion_point(field_mutable:np2ps.Credentials.rsa_public_key)
  return _s;
}
inline const std::string& Credentials::_internal_rsa_public_key() const {
  return _impl_.rsa_public_key_.Get();
}
inline void Credentials::_internal_set_rsa_public_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rsa_public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Credentials::_internal_mutable_rsa_public_key() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.rsa_public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Credentials::release_rsa_public_key() {
  // @@protoc_insertion_point(field_release:np2ps.Credentials.rsa_public_key)
  if (!_internal_has_rsa_public_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.rsa_public_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rsa_public_key_.IsDefault()) {
    _impl_.rsa_public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Credentials::set_allocated_rsa_public_key(std::string* rsa_public_key) {
  if (rsa_public_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rsa_public_key_.SetAllocated(rsa_public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rsa_public_key_.IsDefault()) {
    _impl_.rsa_public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.Credentials.rsa_public_key)
}

// optional string eax_key = 4;
inline bool Credentials::_internal_has_eax_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Credentials::has_eax_key() const {
  return _internal_has_eax_key();
}
inline void Credentials::clear_eax_key() {
  _impl_.eax_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Credentials::eax_key() const {
  // @@protoc_insertion_point(field_get:np2ps.Credentials.eax_key)
  return _internal_eax_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Credentials::set_eax_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.eax_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.Credentials.eax_key)
}
inline std::string* Credentials::mutable_eax_key() {
  std::string* _s = _internal_mutable_eax_key();
  // @@protoc_insertion_point(field_mutable:np2ps.Credentials.eax_key)
  return _s;
}
inline const std::string& Credentials::_internal_eax_key() const {
  return _impl_.eax_key_.Get();
}
inline void Credentials::_internal_set_eax_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.eax_key_.Set(value, GetArenaForAllocation());
}
inline std::string* Credentials::_internal_mutable_eax_key() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.eax_key_.Mutable(GetArenaForAllocation());
}
inline std::string* Credentials::release_eax_key() {
  // @@protoc_insertion_point(field_release:np2ps.Credentials.eax_key)
  if (!_internal_has_eax_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.eax_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.eax_key_.IsDefault()) {
    _impl_.eax_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Credentials::set_allocated_eax_key(std::string* eax_key) {
  if (eax_key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.eax_key_.SetAllocated(eax_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.eax_key_.IsDefault()) {
    _impl_.eax_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.Credentials.eax_key)
}

// -------------------------------------------------------------------

// SymmetricKey

// bytes key = 1;
inline void SymmetricKey::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& SymmetricKey::key() const {
  // @@protoc_insertion_point(field_get:np2ps.SymmetricKey.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SymmetricKey::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.SymmetricKey.key)
}
inline std::string* SymmetricKey::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:np2ps.SymmetricKey.key)
  return _s;
}
inline const std::string& SymmetricKey::_internal_key() const {
  return _impl_.key_.Get();
}
inline void SymmetricKey::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* SymmetricKey::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* SymmetricKey::release_key() {
  // @@protoc_insertion_point(field_release:np2ps.SymmetricKey.key)
  return _impl_.key_.Release();
}
inline void SymmetricKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.SymmetricKey.key)
}

// bytes signature = 2;
inline void SymmetricKey::clear_signature() {
  _impl_.signature_.ClearToEmpty();
}
inline const std::string& SymmetricKey::signature() const {
  // @@protoc_insertion_point(field_get:np2ps.SymmetricKey.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SymmetricKey::set_signature(ArgT0&& arg0, ArgT... args) {
 
 _impl_.signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.SymmetricKey.signature)
}
inline std::string* SymmetricKey::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:np2ps.SymmetricKey.signature)
  return _s;
}
inline const std::string& SymmetricKey::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void SymmetricKey::_internal_set_signature(const std::string& value) {
  
  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* SymmetricKey::_internal_mutable_signature() {
  
  return _impl_.signature_.Mutable(GetArenaForAllocation());
}
inline std::string* SymmetricKey::release_signature() {
  // @@protoc_insertion_point(field_release:np2ps.SymmetricKey.signature)
  return _impl_.signature_.Release();
}
inline void SymmetricKey::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  _impl_.signature_.SetAllocated(signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.signature_.IsDefault()) {
    _impl_.signature_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.SymmetricKey.signature)
}

// -------------------------------------------------------------------

// PublicKey

// bytes key = 1;
inline void PublicKey::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& PublicKey::key() const {
  // @@protoc_insertion_point(field_get:np2ps.PublicKey.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublicKey::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:np2ps.PublicKey.key)
}
inline std::string* PublicKey::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:np2ps.PublicKey.key)
  return _s;
}
inline const std::string& PublicKey::_internal_key() const {
  return _impl_.key_.Get();
}
inline void PublicKey::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* PublicKey::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* PublicKey::release_key() {
  // @@protoc_insertion_point(field_release:np2ps.PublicKey.key)
  return _impl_.key_.Release();
}
inline void PublicKey::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:np2ps.PublicKey.key)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace np2ps

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::np2ps::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::np2ps::MessageType>() {
  return ::np2ps::MessageType_descriptor();
}
template <> struct is_proto_enum< ::np2ps::MessageContext> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::np2ps::MessageContext>() {
  return ::np2ps::MessageContext_descriptor();
}
template <> struct is_proto_enum< ::np2ps::MarginAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::np2ps::MarginAction>() {
  return ::np2ps::MarginAction_descriptor();
}
template <> struct is_proto_enum< ::np2ps::ArticleAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::np2ps::ArticleAction>() {
  return ::np2ps::ArticleAction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
