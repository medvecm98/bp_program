// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newspaper_entry.proto

#include "newspaper_entry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace np2ps {
PROTOBUF_CONSTEXPR NewspaperEntry::NewspaperEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.authorities_)*/{}
  , /*decltype(_impl_._authorities_cached_byte_size_)*/{0}
  , /*decltype(_impl_.news_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.news_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NewspaperEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewspaperEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewspaperEntryDefaultTypeInternal() {}
  union {
    NewspaperEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewspaperEntryDefaultTypeInternal _NewspaperEntry_default_instance_;
PROTOBUF_CONSTEXPR NetworkSerializedNewspaperEntry::NetworkSerializedNewspaperEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.articles_)*/{}
  , /*decltype(_impl_.entry_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NetworkSerializedNewspaperEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkSerializedNewspaperEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkSerializedNewspaperEntryDefaultTypeInternal() {}
  union {
    NetworkSerializedNewspaperEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkSerializedNewspaperEntryDefaultTypeInternal _NetworkSerializedNewspaperEntry_default_instance_;
PROTOBUF_CONSTEXPR LocalSerializedNewspaperEntry::LocalSerializedNewspaperEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.articles_)*/{}
  , /*decltype(_impl_.entry_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocalSerializedNewspaperEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalSerializedNewspaperEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalSerializedNewspaperEntryDefaultTypeInternal() {}
  union {
    LocalSerializedNewspaperEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalSerializedNewspaperEntryDefaultTypeInternal _LocalSerializedNewspaperEntry_default_instance_;
}  // namespace np2ps
static ::_pb::Metadata file_level_metadata_newspaper_5fentry_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_newspaper_5fentry_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_newspaper_5fentry_2eproto = nullptr;

const uint32_t TableStruct_newspaper_5fentry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::np2ps::NewspaperEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::np2ps::NewspaperEntry, _impl_.news_id_),
  PROTOBUF_FIELD_OFFSET(::np2ps::NewspaperEntry, _impl_.news_name_),
  PROTOBUF_FIELD_OFFSET(::np2ps::NewspaperEntry, _impl_.authorities_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::np2ps::NetworkSerializedNewspaperEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::np2ps::NetworkSerializedNewspaperEntry, _impl_.entry_),
  PROTOBUF_FIELD_OFFSET(::np2ps::NetworkSerializedNewspaperEntry, _impl_.articles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::np2ps::LocalSerializedNewspaperEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::np2ps::LocalSerializedNewspaperEntry, _impl_.entry_),
  PROTOBUF_FIELD_OFFSET(::np2ps::LocalSerializedNewspaperEntry, _impl_.articles_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::np2ps::NewspaperEntry)},
  { 9, -1, -1, sizeof(::np2ps::NetworkSerializedNewspaperEntry)},
  { 17, -1, -1, sizeof(::np2ps::LocalSerializedNewspaperEntry)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::np2ps::_NewspaperEntry_default_instance_._instance,
  &::np2ps::_NetworkSerializedNewspaperEntry_default_instance_._instance,
  &::np2ps::_LocalSerializedNewspaperEntry_default_instance_._instance,
};

const char descriptor_table_protodef_newspaper_5fentry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025newspaper_entry.proto\022\005np2ps\032\016articles"
  ".proto\"I\n\016NewspaperEntry\022\017\n\007news_id\030\001 \001("
  "\004\022\021\n\tnews_name\030\002 \001(\t\022\023\n\013authorities\030\004 \003("
  "\004\"i\n\037NetworkSerializedNewspaperEntry\022$\n\005"
  "entry\030\001 \001(\0132\025.np2ps.NewspaperEntry\022 \n\010ar"
  "ticles\030\003 \003(\0132\016.np2ps.Article\"q\n\035LocalSer"
  "ializedNewspaperEntry\022$\n\005entry\030\001 \001(\0132\025.n"
  "p2ps.NewspaperEntry\022*\n\010articles\030\002 \003(\0132\030."
  "np2ps.SerializedArticleb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_newspaper_5fentry_2eproto_deps[1] = {
  &::descriptor_table_articles_2eproto,
};
static ::_pbi::once_flag descriptor_table_newspaper_5fentry_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_newspaper_5fentry_2eproto = {
    false, false, 351, descriptor_table_protodef_newspaper_5fentry_2eproto,
    "newspaper_entry.proto",
    &descriptor_table_newspaper_5fentry_2eproto_once, descriptor_table_newspaper_5fentry_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_newspaper_5fentry_2eproto::offsets,
    file_level_metadata_newspaper_5fentry_2eproto, file_level_enum_descriptors_newspaper_5fentry_2eproto,
    file_level_service_descriptors_newspaper_5fentry_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_newspaper_5fentry_2eproto_getter() {
  return &descriptor_table_newspaper_5fentry_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_newspaper_5fentry_2eproto(&descriptor_table_newspaper_5fentry_2eproto);
namespace np2ps {

// ===================================================================

class NewspaperEntry::_Internal {
 public:
};

NewspaperEntry::NewspaperEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:np2ps.NewspaperEntry)
}
NewspaperEntry::NewspaperEntry(const NewspaperEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewspaperEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.authorities_){from._impl_.authorities_}
    , /*decltype(_impl_._authorities_cached_byte_size_)*/{0}
    , decltype(_impl_.news_name_){}
    , decltype(_impl_.news_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.news_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.news_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_news_name().empty()) {
    _this->_impl_.news_name_.Set(from._internal_news_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.news_id_ = from._impl_.news_id_;
  // @@protoc_insertion_point(copy_constructor:np2ps.NewspaperEntry)
}

inline void NewspaperEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.authorities_){arena}
    , /*decltype(_impl_._authorities_cached_byte_size_)*/{0}
    , decltype(_impl_.news_name_){}
    , decltype(_impl_.news_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.news_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.news_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewspaperEntry::~NewspaperEntry() {
  // @@protoc_insertion_point(destructor:np2ps.NewspaperEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewspaperEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.authorities_.~RepeatedField();
  _impl_.news_name_.Destroy();
}

void NewspaperEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewspaperEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:np2ps.NewspaperEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.authorities_.Clear();
  _impl_.news_name_.ClearToEmpty();
  _impl_.news_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewspaperEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 news_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.news_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string news_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_news_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "np2ps.NewspaperEntry.news_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 authorities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_authorities(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_authorities(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewspaperEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:np2ps.NewspaperEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 news_id = 1;
  if (this->_internal_news_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_news_id(), target);
  }

  // string news_name = 2;
  if (!this->_internal_news_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_news_name().data(), static_cast<int>(this->_internal_news_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "np2ps.NewspaperEntry.news_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_news_name(), target);
  }

  // repeated uint64 authorities = 4;
  {
    int byte_size = _impl_._authorities_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_authorities(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:np2ps.NewspaperEntry)
  return target;
}

size_t NewspaperEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:np2ps.NewspaperEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 authorities = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.authorities_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._authorities_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string news_name = 2;
  if (!this->_internal_news_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_news_name());
  }

  // uint64 news_id = 1;
  if (this->_internal_news_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_news_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewspaperEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewspaperEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewspaperEntry::GetClassData() const { return &_class_data_; }


void NewspaperEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewspaperEntry*>(&to_msg);
  auto& from = static_cast<const NewspaperEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:np2ps.NewspaperEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.authorities_.MergeFrom(from._impl_.authorities_);
  if (!from._internal_news_name().empty()) {
    _this->_internal_set_news_name(from._internal_news_name());
  }
  if (from._internal_news_id() != 0) {
    _this->_internal_set_news_id(from._internal_news_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewspaperEntry::CopyFrom(const NewspaperEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:np2ps.NewspaperEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewspaperEntry::IsInitialized() const {
  return true;
}

void NewspaperEntry::InternalSwap(NewspaperEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.authorities_.InternalSwap(&other->_impl_.authorities_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.news_name_, lhs_arena,
      &other->_impl_.news_name_, rhs_arena
  );
  swap(_impl_.news_id_, other->_impl_.news_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewspaperEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_newspaper_5fentry_2eproto_getter, &descriptor_table_newspaper_5fentry_2eproto_once,
      file_level_metadata_newspaper_5fentry_2eproto[0]);
}

// ===================================================================

class NetworkSerializedNewspaperEntry::_Internal {
 public:
  static const ::np2ps::NewspaperEntry& entry(const NetworkSerializedNewspaperEntry* msg);
};

const ::np2ps::NewspaperEntry&
NetworkSerializedNewspaperEntry::_Internal::entry(const NetworkSerializedNewspaperEntry* msg) {
  return *msg->_impl_.entry_;
}
void NetworkSerializedNewspaperEntry::clear_articles() {
  _impl_.articles_.Clear();
}
NetworkSerializedNewspaperEntry::NetworkSerializedNewspaperEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:np2ps.NetworkSerializedNewspaperEntry)
}
NetworkSerializedNewspaperEntry::NetworkSerializedNewspaperEntry(const NetworkSerializedNewspaperEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NetworkSerializedNewspaperEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.articles_){from._impl_.articles_}
    , decltype(_impl_.entry_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entry()) {
    _this->_impl_.entry_ = new ::np2ps::NewspaperEntry(*from._impl_.entry_);
  }
  // @@protoc_insertion_point(copy_constructor:np2ps.NetworkSerializedNewspaperEntry)
}

inline void NetworkSerializedNewspaperEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.articles_){arena}
    , decltype(_impl_.entry_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NetworkSerializedNewspaperEntry::~NetworkSerializedNewspaperEntry() {
  // @@protoc_insertion_point(destructor:np2ps.NetworkSerializedNewspaperEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkSerializedNewspaperEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.articles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.entry_;
}

void NetworkSerializedNewspaperEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NetworkSerializedNewspaperEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:np2ps.NetworkSerializedNewspaperEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.articles_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.entry_ != nullptr) {
    delete _impl_.entry_;
  }
  _impl_.entry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkSerializedNewspaperEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .np2ps.NewspaperEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .np2ps.Article articles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_articles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkSerializedNewspaperEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:np2ps.NetworkSerializedNewspaperEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .np2ps.NewspaperEntry entry = 1;
  if (this->_internal_has_entry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entry(this),
        _Internal::entry(this).GetCachedSize(), target, stream);
  }

  // repeated .np2ps.Article articles = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_articles_size()); i < n; i++) {
    const auto& repfield = this->_internal_articles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:np2ps.NetworkSerializedNewspaperEntry)
  return target;
}

size_t NetworkSerializedNewspaperEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:np2ps.NetworkSerializedNewspaperEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .np2ps.Article articles = 3;
  total_size += 1UL * this->_internal_articles_size();
  for (const auto& msg : this->_impl_.articles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .np2ps.NewspaperEntry entry = 1;
  if (this->_internal_has_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NetworkSerializedNewspaperEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NetworkSerializedNewspaperEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NetworkSerializedNewspaperEntry::GetClassData() const { return &_class_data_; }


void NetworkSerializedNewspaperEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NetworkSerializedNewspaperEntry*>(&to_msg);
  auto& from = static_cast<const NetworkSerializedNewspaperEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:np2ps.NetworkSerializedNewspaperEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.articles_.MergeFrom(from._impl_.articles_);
  if (from._internal_has_entry()) {
    _this->_internal_mutable_entry()->::np2ps::NewspaperEntry::MergeFrom(
        from._internal_entry());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NetworkSerializedNewspaperEntry::CopyFrom(const NetworkSerializedNewspaperEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:np2ps.NetworkSerializedNewspaperEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkSerializedNewspaperEntry::IsInitialized() const {
  return true;
}

void NetworkSerializedNewspaperEntry::InternalSwap(NetworkSerializedNewspaperEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.articles_.InternalSwap(&other->_impl_.articles_);
  swap(_impl_.entry_, other->_impl_.entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkSerializedNewspaperEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_newspaper_5fentry_2eproto_getter, &descriptor_table_newspaper_5fentry_2eproto_once,
      file_level_metadata_newspaper_5fentry_2eproto[1]);
}

// ===================================================================

class LocalSerializedNewspaperEntry::_Internal {
 public:
  static const ::np2ps::NewspaperEntry& entry(const LocalSerializedNewspaperEntry* msg);
};

const ::np2ps::NewspaperEntry&
LocalSerializedNewspaperEntry::_Internal::entry(const LocalSerializedNewspaperEntry* msg) {
  return *msg->_impl_.entry_;
}
void LocalSerializedNewspaperEntry::clear_articles() {
  _impl_.articles_.Clear();
}
LocalSerializedNewspaperEntry::LocalSerializedNewspaperEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:np2ps.LocalSerializedNewspaperEntry)
}
LocalSerializedNewspaperEntry::LocalSerializedNewspaperEntry(const LocalSerializedNewspaperEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalSerializedNewspaperEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.articles_){from._impl_.articles_}
    , decltype(_impl_.entry_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entry()) {
    _this->_impl_.entry_ = new ::np2ps::NewspaperEntry(*from._impl_.entry_);
  }
  // @@protoc_insertion_point(copy_constructor:np2ps.LocalSerializedNewspaperEntry)
}

inline void LocalSerializedNewspaperEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.articles_){arena}
    , decltype(_impl_.entry_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocalSerializedNewspaperEntry::~LocalSerializedNewspaperEntry() {
  // @@protoc_insertion_point(destructor:np2ps.LocalSerializedNewspaperEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalSerializedNewspaperEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.articles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.entry_;
}

void LocalSerializedNewspaperEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalSerializedNewspaperEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:np2ps.LocalSerializedNewspaperEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.articles_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.entry_ != nullptr) {
    delete _impl_.entry_;
  }
  _impl_.entry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalSerializedNewspaperEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .np2ps.NewspaperEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .np2ps.SerializedArticle articles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_articles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalSerializedNewspaperEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:np2ps.LocalSerializedNewspaperEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .np2ps.NewspaperEntry entry = 1;
  if (this->_internal_has_entry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entry(this),
        _Internal::entry(this).GetCachedSize(), target, stream);
  }

  // repeated .np2ps.SerializedArticle articles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_articles_size()); i < n; i++) {
    const auto& repfield = this->_internal_articles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:np2ps.LocalSerializedNewspaperEntry)
  return target;
}

size_t LocalSerializedNewspaperEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:np2ps.LocalSerializedNewspaperEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .np2ps.SerializedArticle articles = 2;
  total_size += 1UL * this->_internal_articles_size();
  for (const auto& msg : this->_impl_.articles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .np2ps.NewspaperEntry entry = 1;
  if (this->_internal_has_entry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entry_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalSerializedNewspaperEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalSerializedNewspaperEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalSerializedNewspaperEntry::GetClassData() const { return &_class_data_; }


void LocalSerializedNewspaperEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalSerializedNewspaperEntry*>(&to_msg);
  auto& from = static_cast<const LocalSerializedNewspaperEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:np2ps.LocalSerializedNewspaperEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.articles_.MergeFrom(from._impl_.articles_);
  if (from._internal_has_entry()) {
    _this->_internal_mutable_entry()->::np2ps::NewspaperEntry::MergeFrom(
        from._internal_entry());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalSerializedNewspaperEntry::CopyFrom(const LocalSerializedNewspaperEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:np2ps.LocalSerializedNewspaperEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalSerializedNewspaperEntry::IsInitialized() const {
  return true;
}

void LocalSerializedNewspaperEntry::InternalSwap(LocalSerializedNewspaperEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.articles_.InternalSwap(&other->_impl_.articles_);
  swap(_impl_.entry_, other->_impl_.entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalSerializedNewspaperEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_newspaper_5fentry_2eproto_getter, &descriptor_table_newspaper_5fentry_2eproto_once,
      file_level_metadata_newspaper_5fentry_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace np2ps
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::np2ps::NewspaperEntry*
Arena::CreateMaybeMessage< ::np2ps::NewspaperEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::np2ps::NewspaperEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::np2ps::NetworkSerializedNewspaperEntry*
Arena::CreateMaybeMessage< ::np2ps::NetworkSerializedNewspaperEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::np2ps::NetworkSerializedNewspaperEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::np2ps::LocalSerializedNewspaperEntry*
Arena::CreateMaybeMessage< ::np2ps::LocalSerializedNewspaperEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::np2ps::LocalSerializedNewspaperEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
