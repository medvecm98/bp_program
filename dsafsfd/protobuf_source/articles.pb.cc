// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: articles.proto

#include "articles.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace np2ps {
PROTOBUF_CONSTEXPR HashWrapper::HashWrapper(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hash_)*/uint64_t{0u}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HashWrapperDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HashWrapperDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HashWrapperDefaultTypeInternal() {}
  union {
    HashWrapper _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HashWrapperDefaultTypeInternal _HashWrapper_default_instance_;
PROTOBUF_CONSTEXPR Margin::Margin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarginDefaultTypeInternal() {}
  union {
    Margin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarginDefaultTypeInternal _Margin_default_instance_;
PROTOBUF_CONSTEXPR Margins::Margins(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.margins_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarginsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarginsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarginsDefaultTypeInternal() {}
  union {
    Margins _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarginsDefaultTypeInternal _Margins_default_instance_;
PROTOBUF_CONSTEXPR Article_ParagraphHashesEntry_DoNotUse::Article_ParagraphHashesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Article_ParagraphHashesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Article_ParagraphHashesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Article_ParagraphHashesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Article_ParagraphHashesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Article_ParagraphHashesEntry_DoNotUseDefaultTypeInternal _Article_ParagraphHashesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Article_MarginsEntry_DoNotUse::Article_MarginsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Article_MarginsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Article_MarginsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Article_MarginsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Article_MarginsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Article_MarginsEntry_DoNotUseDefaultTypeInternal _Article_MarginsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Article::Article(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.paragraph_hashes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.categories_)*/{}
  , /*decltype(_impl_.margins_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.author_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.news_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.heading_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.crypto_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.author_id_)*/uint64_t{0u}
  , /*decltype(_impl_.news_id_)*/uint64_t{0u}
  , /*decltype(_impl_.main_hash_)*/uint64_t{0u}
  , /*decltype(_impl_.length_)*/uint64_t{0u}
  , /*decltype(_impl_.creation_time_)*/int64_t{0}
  , /*decltype(_impl_.modification_time_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0u} {}
struct ArticleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ArticleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ArticleDefaultTypeInternal() {}
  union {
    Article _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ArticleDefaultTypeInternal _Article_default_instance_;
PROTOBUF_CONSTEXPR SerializedArticle::SerializedArticle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_to_article_file_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.notes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.article_)*/nullptr
  , /*decltype(_impl_.article_present_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SerializedArticleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SerializedArticleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SerializedArticleDefaultTypeInternal() {}
  union {
    SerializedArticle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SerializedArticleDefaultTypeInternal _SerializedArticle_default_instance_;
}  // namespace np2ps
static ::_pb::Metadata file_level_metadata_articles_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_articles_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_articles_2eproto = nullptr;

const uint32_t TableStruct_articles_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::np2ps::HashWrapper, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::np2ps::HashWrapper, _impl_.hash_),
  PROTOBUF_FIELD_OFFSET(::np2ps::HashWrapper, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::np2ps::Margin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::np2ps::Margin, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Margin, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Margin, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::np2ps::Margins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::np2ps::Margins, _impl_.margins_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article_ParagraphHashesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article_ParagraphHashesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::np2ps::Article_ParagraphHashesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article_ParagraphHashesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::np2ps::Article_MarginsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article_MarginsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::np2ps::Article_MarginsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article_MarginsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.author_name_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.author_id_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.news_name_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.news_id_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.main_hash_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.heading_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.paragraph_hashes_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.length_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.categories_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.margins_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.crypto_hash_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.creation_time_),
  PROTOBUF_FIELD_OFFSET(::np2ps::Article, _impl_.modification_time_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::np2ps::SerializedArticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::np2ps::SerializedArticle, _impl_.article_),
  PROTOBUF_FIELD_OFFSET(::np2ps::SerializedArticle, _impl_.path_to_article_file_),
  PROTOBUF_FIELD_OFFSET(::np2ps::SerializedArticle, _impl_.article_present_),
  PROTOBUF_FIELD_OFFSET(::np2ps::SerializedArticle, _impl_.notes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::np2ps::HashWrapper)},
  { 8, -1, -1, sizeof(::np2ps::Margin)},
  { 17, -1, -1, sizeof(::np2ps::Margins)},
  { 24, 32, -1, sizeof(::np2ps::Article_ParagraphHashesEntry_DoNotUse)},
  { 34, 42, -1, sizeof(::np2ps::Article_MarginsEntry_DoNotUse)},
  { 44, 64, -1, sizeof(::np2ps::Article)},
  { 78, -1, -1, sizeof(::np2ps::SerializedArticle)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::np2ps::_HashWrapper_default_instance_._instance,
  &::np2ps::_Margin_default_instance_._instance,
  &::np2ps::_Margins_default_instance_._instance,
  &::np2ps::_Article_ParagraphHashesEntry_DoNotUse_default_instance_._instance,
  &::np2ps::_Article_MarginsEntry_DoNotUse_default_instance_._instance,
  &::np2ps::_Article_default_instance_._instance,
  &::np2ps::_SerializedArticle_default_instance_._instance,
};

const char descriptor_table_protodef_articles_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016articles.proto\022\005np2ps\"*\n\013HashWrapper\022\014"
  "\n\004hash\030\001 \001(\004\022\r\n\005level\030\002 \001(\r\"3\n\006Margin\022\n\n"
  "\002id\030\003 \001(\004\022\014\n\004type\030\001 \001(\t\022\017\n\007content\030\002 \001(\t"
  "\")\n\007Margins\022\036\n\007margins\030\001 \003(\0132\r.np2ps.Mar"
  "gin\"\223\004\n\007Article\022\030\n\013author_name\030\001 \001(\tH\000\210\001"
  "\001\022\021\n\tauthor_id\030\002 \001(\004\022\026\n\tnews_name\030\003 \001(\tH"
  "\001\210\001\001\022\017\n\007news_id\030\004 \001(\004\022\021\n\tmain_hash\030\005 \001(\004"
  "\022\017\n\007heading\030\006 \001(\t\022=\n\020paragraph_hashes\030\007 "
  "\003(\0132#.np2ps.Article.ParagraphHashesEntry"
  "\022\016\n\006length\030\010 \001(\004\022\022\n\ncategories\030\t \003(\t\022,\n\007"
  "margins\030\n \003(\0132\033.np2ps.Article.MarginsEnt"
  "ry\022\014\n\004type\030\013 \001(\r\022\023\n\013crypto_hash\030\014 \001(\014\022\025\n"
  "\rcreation_time\030\r \001(\003\022\031\n\021modification_tim"
  "e\030\016 \001(\003\032J\n\024ParagraphHashesEntry\022\013\n\003key\030\001"
  " \001(\005\022!\n\005value\030\002 \001(\0132\022.np2ps.HashWrapper:"
  "\0028\001\032>\n\014MarginsEntry\022\013\n\003key\030\001 \001(\004\022\035\n\005valu"
  "e\030\002 \001(\0132\016.np2ps.Margins:\0028\001B\016\n\014_author_n"
  "ameB\014\n\n_news_name\"z\n\021SerializedArticle\022\037"
  "\n\007article\030\001 \001(\0132\016.np2ps.Article\022\034\n\024path_"
  "to_article_file\030\002 \001(\t\022\027\n\017article_present"
  "\030\003 \001(\010\022\r\n\005notes\030\004 \001(\tb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_articles_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_articles_2eproto = {
    false, false, 829, descriptor_table_protodef_articles_2eproto,
    "articles.proto",
    &descriptor_table_articles_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_articles_2eproto::offsets,
    file_level_metadata_articles_2eproto, file_level_enum_descriptors_articles_2eproto,
    file_level_service_descriptors_articles_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_articles_2eproto_getter() {
  return &descriptor_table_articles_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_articles_2eproto(&descriptor_table_articles_2eproto);
namespace np2ps {

// ===================================================================

class HashWrapper::_Internal {
 public:
};

HashWrapper::HashWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:np2ps.HashWrapper)
}
HashWrapper::HashWrapper(const HashWrapper& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HashWrapper* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hash_, &from._impl_.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.hash_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:np2ps.HashWrapper)
}

inline void HashWrapper::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hash_){uint64_t{0u}}
    , decltype(_impl_.level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HashWrapper::~HashWrapper() {
  // @@protoc_insertion_point(destructor:np2ps.HashWrapper)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HashWrapper::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HashWrapper::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HashWrapper::Clear() {
// @@protoc_insertion_point(message_clear_start:np2ps.HashWrapper)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.hash_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashWrapper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HashWrapper::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:np2ps.HashWrapper)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:np2ps.HashWrapper)
  return target;
}

size_t HashWrapper::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:np2ps.HashWrapper)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hash = 1;
  if (this->_internal_hash() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_hash());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HashWrapper::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HashWrapper::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HashWrapper::GetClassData() const { return &_class_data_; }


void HashWrapper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HashWrapper*>(&to_msg);
  auto& from = static_cast<const HashWrapper&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:np2ps.HashWrapper)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hash() != 0) {
    _this->_internal_set_hash(from._internal_hash());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HashWrapper::CopyFrom(const HashWrapper& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:np2ps.HashWrapper)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashWrapper::IsInitialized() const {
  return true;
}

void HashWrapper::InternalSwap(HashWrapper* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HashWrapper, _impl_.level_)
      + sizeof(HashWrapper::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(HashWrapper, _impl_.hash_)>(
          reinterpret_cast<char*>(&_impl_.hash_),
          reinterpret_cast<char*>(&other->_impl_.hash_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HashWrapper::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto_getter, &descriptor_table_articles_2eproto_once,
      file_level_metadata_articles_2eproto[0]);
}

// ===================================================================

class Margin::_Internal {
 public:
};

Margin::Margin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:np2ps.Margin)
}
Margin::Margin(const Margin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Margin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:np2ps.Margin)
}

inline void Margin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.content_){}
    , decltype(_impl_.id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Margin::~Margin() {
  // @@protoc_insertion_point(destructor:np2ps.Margin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Margin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
  _impl_.content_.Destroy();
}

void Margin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Margin::Clear() {
// @@protoc_insertion_point(message_clear_start:np2ps.Margin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _impl_.id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Margin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "np2ps.Margin.type"));
        } else
          goto handle_unusual;
        continue;
      // string content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "np2ps.Margin.content"));
        } else
          goto handle_unusual;
        continue;
      // uint64 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Margin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:np2ps.Margin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "np2ps.Margin.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content().data(), static_cast<int>(this->_internal_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "np2ps.Margin.content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_content(), target);
  }

  // uint64 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:np2ps.Margin)
  return target;
}

size_t Margin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:np2ps.Margin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content());
  }

  // uint64 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Margin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Margin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Margin::GetClassData() const { return &_class_data_; }


void Margin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Margin*>(&to_msg);
  auto& from = static_cast<const Margin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:np2ps.Margin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Margin::CopyFrom(const Margin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:np2ps.Margin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Margin::IsInitialized() const {
  return true;
}

void Margin::InternalSwap(Margin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Margin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto_getter, &descriptor_table_articles_2eproto_once,
      file_level_metadata_articles_2eproto[1]);
}

// ===================================================================

class Margins::_Internal {
 public:
};

Margins::Margins(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:np2ps.Margins)
}
Margins::Margins(const Margins& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Margins* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.margins_){from._impl_.margins_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:np2ps.Margins)
}

inline void Margins::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.margins_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Margins::~Margins() {
  // @@protoc_insertion_point(destructor:np2ps.Margins)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Margins::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.margins_.~RepeatedPtrField();
}

void Margins::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Margins::Clear() {
// @@protoc_insertion_point(message_clear_start:np2ps.Margins)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.margins_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Margins::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .np2ps.Margin margins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_margins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Margins::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:np2ps.Margins)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .np2ps.Margin margins = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_margins_size()); i < n; i++) {
    const auto& repfield = this->_internal_margins(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:np2ps.Margins)
  return target;
}

size_t Margins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:np2ps.Margins)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .np2ps.Margin margins = 1;
  total_size += 1UL * this->_internal_margins_size();
  for (const auto& msg : this->_impl_.margins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Margins::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Margins::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Margins::GetClassData() const { return &_class_data_; }


void Margins::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Margins*>(&to_msg);
  auto& from = static_cast<const Margins&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:np2ps.Margins)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.margins_.MergeFrom(from._impl_.margins_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Margins::CopyFrom(const Margins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:np2ps.Margins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Margins::IsInitialized() const {
  return true;
}

void Margins::InternalSwap(Margins* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.margins_.InternalSwap(&other->_impl_.margins_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Margins::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto_getter, &descriptor_table_articles_2eproto_once,
      file_level_metadata_articles_2eproto[2]);
}

// ===================================================================

Article_ParagraphHashesEntry_DoNotUse::Article_ParagraphHashesEntry_DoNotUse() {}
Article_ParagraphHashesEntry_DoNotUse::Article_ParagraphHashesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Article_ParagraphHashesEntry_DoNotUse::MergeFrom(const Article_ParagraphHashesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Article_ParagraphHashesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto_getter, &descriptor_table_articles_2eproto_once,
      file_level_metadata_articles_2eproto[3]);
}

// ===================================================================

Article_MarginsEntry_DoNotUse::Article_MarginsEntry_DoNotUse() {}
Article_MarginsEntry_DoNotUse::Article_MarginsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Article_MarginsEntry_DoNotUse::MergeFrom(const Article_MarginsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Article_MarginsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto_getter, &descriptor_table_articles_2eproto_once,
      file_level_metadata_articles_2eproto[4]);
}

// ===================================================================

class Article::_Internal {
 public:
  using HasBits = decltype(std::declval<Article>()._impl_._has_bits_);
  static void set_has_author_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_news_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Article::Article(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Article::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:np2ps.Article)
}
Article::Article(const Article& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Article* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.paragraph_hashes_)*/{}
    , decltype(_impl_.categories_){from._impl_.categories_}
    , /*decltype(_impl_.margins_)*/{}
    , decltype(_impl_.author_name_){}
    , decltype(_impl_.news_name_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.crypto_hash_){}
    , decltype(_impl_.author_id_){}
    , decltype(_impl_.news_id_){}
    , decltype(_impl_.main_hash_){}
    , decltype(_impl_.length_){}
    , decltype(_impl_.creation_time_){}
    , decltype(_impl_.modification_time_){}
    , decltype(_impl_.type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.paragraph_hashes_.MergeFrom(from._impl_.paragraph_hashes_);
  _this->_impl_.margins_.MergeFrom(from._impl_.margins_);
  _impl_.author_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_author_name()) {
    _this->_impl_.author_name_.Set(from._internal_author_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.news_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.news_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_news_name()) {
    _this->_impl_.news_name_.Set(from._internal_news_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.heading_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.heading_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_heading().empty()) {
    _this->_impl_.heading_.Set(from._internal_heading(), 
      _this->GetArenaForAllocation());
  }
  _impl_.crypto_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crypto_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_crypto_hash().empty()) {
    _this->_impl_.crypto_hash_.Set(from._internal_crypto_hash(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.author_id_, &from._impl_.author_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.author_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:np2ps.Article)
}

inline void Article::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.paragraph_hashes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.categories_){arena}
    , /*decltype(_impl_.margins_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.author_name_){}
    , decltype(_impl_.news_name_){}
    , decltype(_impl_.heading_){}
    , decltype(_impl_.crypto_hash_){}
    , decltype(_impl_.author_id_){uint64_t{0u}}
    , decltype(_impl_.news_id_){uint64_t{0u}}
    , decltype(_impl_.main_hash_){uint64_t{0u}}
    , decltype(_impl_.length_){uint64_t{0u}}
    , decltype(_impl_.creation_time_){int64_t{0}}
    , decltype(_impl_.modification_time_){int64_t{0}}
    , decltype(_impl_.type_){0u}
  };
  _impl_.author_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.news_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.news_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.heading_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.heading_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.crypto_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.crypto_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Article::~Article() {
  // @@protoc_insertion_point(destructor:np2ps.Article)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Article::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paragraph_hashes_.Destruct();
  _impl_.paragraph_hashes_.~MapField();
  _impl_.categories_.~RepeatedPtrField();
  _impl_.margins_.Destruct();
  _impl_.margins_.~MapField();
  _impl_.author_name_.Destroy();
  _impl_.news_name_.Destroy();
  _impl_.heading_.Destroy();
  _impl_.crypto_hash_.Destroy();
}

void Article::ArenaDtor(void* object) {
  Article* _this = reinterpret_cast< Article* >(object);
  _this->_impl_.paragraph_hashes_.Destruct();
  _this->_impl_.margins_.Destruct();
}
void Article::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Article::Clear() {
// @@protoc_insertion_point(message_clear_start:np2ps.Article)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paragraph_hashes_.Clear();
  _impl_.categories_.Clear();
  _impl_.margins_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.author_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.news_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.heading_.ClearToEmpty();
  _impl_.crypto_hash_.ClearToEmpty();
  ::memset(&_impl_.author_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.author_id_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Article::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string author_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_author_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "np2ps.Article.author_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 author_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.author_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string news_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_news_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "np2ps.Article.news_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 news_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.news_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 main_hash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.main_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string heading = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_heading();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "np2ps.Article.heading"));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .np2ps.HashWrapper> paragraph_hashes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.paragraph_hashes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 length = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string categories = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_categories();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "np2ps.Article.categories"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint64, .np2ps.Margins> margins = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.margins_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes crypto_hash = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_crypto_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 creation_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 modification_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.modification_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Article::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:np2ps.Article)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string author_name = 1;
  if (_internal_has_author_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author_name().data(), static_cast<int>(this->_internal_author_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "np2ps.Article.author_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_author_name(), target);
  }

  // uint64 author_id = 2;
  if (this->_internal_author_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_author_id(), target);
  }

  // optional string news_name = 3;
  if (_internal_has_news_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_news_name().data(), static_cast<int>(this->_internal_news_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "np2ps.Article.news_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_news_name(), target);
  }

  // uint64 news_id = 4;
  if (this->_internal_news_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_news_id(), target);
  }

  // uint64 main_hash = 5;
  if (this->_internal_main_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_main_hash(), target);
  }

  // string heading = 6;
  if (!this->_internal_heading().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_heading().data(), static_cast<int>(this->_internal_heading().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "np2ps.Article.heading");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_heading(), target);
  }

  // map<int32, .np2ps.HashWrapper> paragraph_hashes = 7;
  if (!this->_internal_paragraph_hashes().empty()) {
    using MapType = ::_pb::Map<int32_t, ::np2ps::HashWrapper>;
    using WireHelper = Article_ParagraphHashesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_paragraph_hashes();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(7, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint64 length = 8;
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_length(), target);
  }

  // repeated string categories = 9;
  for (int i = 0, n = this->_internal_categories_size(); i < n; i++) {
    const auto& s = this->_internal_categories(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "np2ps.Article.categories");
    target = stream->WriteString(9, s, target);
  }

  // map<uint64, .np2ps.Margins> margins = 10;
  if (!this->_internal_margins().empty()) {
    using MapType = ::_pb::Map<uint64_t, ::np2ps::Margins>;
    using WireHelper = Article_MarginsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_margins();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(10, entry.first, entry.second, target, stream);
      }
    }
  }

  // uint32 type = 11;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_type(), target);
  }

  // bytes crypto_hash = 12;
  if (!this->_internal_crypto_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_crypto_hash(), target);
  }

  // int64 creation_time = 13;
  if (this->_internal_creation_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_creation_time(), target);
  }

  // int64 modification_time = 14;
  if (this->_internal_modification_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_modification_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:np2ps.Article)
  return target;
}

size_t Article::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:np2ps.Article)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .np2ps.HashWrapper> paragraph_hashes = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_paragraph_hashes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::np2ps::HashWrapper >::const_iterator
      it = this->_internal_paragraph_hashes().begin();
      it != this->_internal_paragraph_hashes().end(); ++it) {
    total_size += Article_ParagraphHashesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string categories = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.categories_.size());
  for (int i = 0, n = _impl_.categories_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.categories_.Get(i));
  }

  // map<uint64, .np2ps.Margins> margins = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_margins_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::np2ps::Margins >::const_iterator
      it = this->_internal_margins().begin();
      it != this->_internal_margins().end(); ++it) {
    total_size += Article_MarginsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string author_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_author_name());
    }

    // optional string news_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_news_name());
    }

  }
  // string heading = 6;
  if (!this->_internal_heading().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_heading());
  }

  // bytes crypto_hash = 12;
  if (!this->_internal_crypto_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_crypto_hash());
  }

  // uint64 author_id = 2;
  if (this->_internal_author_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_author_id());
  }

  // uint64 news_id = 4;
  if (this->_internal_news_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_news_id());
  }

  // uint64 main_hash = 5;
  if (this->_internal_main_hash() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_main_hash());
  }

  // uint64 length = 8;
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_length());
  }

  // int64 creation_time = 13;
  if (this->_internal_creation_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time());
  }

  // int64 modification_time = 14;
  if (this->_internal_modification_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_modification_time());
  }

  // uint32 type = 11;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Article::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Article::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Article::GetClassData() const { return &_class_data_; }


void Article::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Article*>(&to_msg);
  auto& from = static_cast<const Article&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:np2ps.Article)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.paragraph_hashes_.MergeFrom(from._impl_.paragraph_hashes_);
  _this->_impl_.categories_.MergeFrom(from._impl_.categories_);
  _this->_impl_.margins_.MergeFrom(from._impl_.margins_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_author_name(from._internal_author_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_news_name(from._internal_news_name());
    }
  }
  if (!from._internal_heading().empty()) {
    _this->_internal_set_heading(from._internal_heading());
  }
  if (!from._internal_crypto_hash().empty()) {
    _this->_internal_set_crypto_hash(from._internal_crypto_hash());
  }
  if (from._internal_author_id() != 0) {
    _this->_internal_set_author_id(from._internal_author_id());
  }
  if (from._internal_news_id() != 0) {
    _this->_internal_set_news_id(from._internal_news_id());
  }
  if (from._internal_main_hash() != 0) {
    _this->_internal_set_main_hash(from._internal_main_hash());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  if (from._internal_creation_time() != 0) {
    _this->_internal_set_creation_time(from._internal_creation_time());
  }
  if (from._internal_modification_time() != 0) {
    _this->_internal_set_modification_time(from._internal_modification_time());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Article::CopyFrom(const Article& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:np2ps.Article)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Article::IsInitialized() const {
  return true;
}

void Article::InternalSwap(Article* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.paragraph_hashes_.InternalSwap(&other->_impl_.paragraph_hashes_);
  _impl_.categories_.InternalSwap(&other->_impl_.categories_);
  _impl_.margins_.InternalSwap(&other->_impl_.margins_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_name_, lhs_arena,
      &other->_impl_.author_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.news_name_, lhs_arena,
      &other->_impl_.news_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.heading_, lhs_arena,
      &other->_impl_.heading_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.crypto_hash_, lhs_arena,
      &other->_impl_.crypto_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Article, _impl_.type_)
      + sizeof(Article::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(Article, _impl_.author_id_)>(
          reinterpret_cast<char*>(&_impl_.author_id_),
          reinterpret_cast<char*>(&other->_impl_.author_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Article::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto_getter, &descriptor_table_articles_2eproto_once,
      file_level_metadata_articles_2eproto[5]);
}

// ===================================================================

class SerializedArticle::_Internal {
 public:
  static const ::np2ps::Article& article(const SerializedArticle* msg);
};

const ::np2ps::Article&
SerializedArticle::_Internal::article(const SerializedArticle* msg) {
  return *msg->_impl_.article_;
}
SerializedArticle::SerializedArticle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:np2ps.SerializedArticle)
}
SerializedArticle::SerializedArticle(const SerializedArticle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SerializedArticle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_to_article_file_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.article_){nullptr}
    , decltype(_impl_.article_present_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_to_article_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_to_article_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path_to_article_file().empty()) {
    _this->_impl_.path_to_article_file_.Set(from._internal_path_to_article_file(), 
      _this->GetArenaForAllocation());
  }
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    _this->_impl_.notes_.Set(from._internal_notes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_article()) {
    _this->_impl_.article_ = new ::np2ps::Article(*from._impl_.article_);
  }
  _this->_impl_.article_present_ = from._impl_.article_present_;
  // @@protoc_insertion_point(copy_constructor:np2ps.SerializedArticle)
}

inline void SerializedArticle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_to_article_file_){}
    , decltype(_impl_.notes_){}
    , decltype(_impl_.article_){nullptr}
    , decltype(_impl_.article_present_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_to_article_file_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_to_article_file_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SerializedArticle::~SerializedArticle() {
  // @@protoc_insertion_point(destructor:np2ps.SerializedArticle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SerializedArticle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_to_article_file_.Destroy();
  _impl_.notes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.article_;
}

void SerializedArticle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SerializedArticle::Clear() {
// @@protoc_insertion_point(message_clear_start:np2ps.SerializedArticle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_to_article_file_.ClearToEmpty();
  _impl_.notes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.article_ != nullptr) {
    delete _impl_.article_;
  }
  _impl_.article_ = nullptr;
  _impl_.article_present_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SerializedArticle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .np2ps.Article article = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_article(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path_to_article_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path_to_article_file();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "np2ps.SerializedArticle.path_to_article_file"));
        } else
          goto handle_unusual;
        continue;
      // bool article_present = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.article_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "np2ps.SerializedArticle.notes"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SerializedArticle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:np2ps.SerializedArticle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .np2ps.Article article = 1;
  if (this->_internal_has_article()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::article(this),
        _Internal::article(this).GetCachedSize(), target, stream);
  }

  // string path_to_article_file = 2;
  if (!this->_internal_path_to_article_file().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path_to_article_file().data(), static_cast<int>(this->_internal_path_to_article_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "np2ps.SerializedArticle.path_to_article_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path_to_article_file(), target);
  }

  // bool article_present = 3;
  if (this->_internal_article_present() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_article_present(), target);
  }

  // string notes = 4;
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "np2ps.SerializedArticle.notes");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:np2ps.SerializedArticle)
  return target;
}

size_t SerializedArticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:np2ps.SerializedArticle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path_to_article_file = 2;
  if (!this->_internal_path_to_article_file().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path_to_article_file());
  }

  // string notes = 4;
  if (!this->_internal_notes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .np2ps.Article article = 1;
  if (this->_internal_has_article()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.article_);
  }

  // bool article_present = 3;
  if (this->_internal_article_present() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SerializedArticle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SerializedArticle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SerializedArticle::GetClassData() const { return &_class_data_; }


void SerializedArticle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SerializedArticle*>(&to_msg);
  auto& from = static_cast<const SerializedArticle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:np2ps.SerializedArticle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path_to_article_file().empty()) {
    _this->_internal_set_path_to_article_file(from._internal_path_to_article_file());
  }
  if (!from._internal_notes().empty()) {
    _this->_internal_set_notes(from._internal_notes());
  }
  if (from._internal_has_article()) {
    _this->_internal_mutable_article()->::np2ps::Article::MergeFrom(
        from._internal_article());
  }
  if (from._internal_article_present() != 0) {
    _this->_internal_set_article_present(from._internal_article_present());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SerializedArticle::CopyFrom(const SerializedArticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:np2ps.SerializedArticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerializedArticle::IsInitialized() const {
  return true;
}

void SerializedArticle::InternalSwap(SerializedArticle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_to_article_file_, lhs_arena,
      &other->_impl_.path_to_article_file_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.notes_, lhs_arena,
      &other->_impl_.notes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SerializedArticle, _impl_.article_present_)
      + sizeof(SerializedArticle::_impl_.article_present_)
      - PROTOBUF_FIELD_OFFSET(SerializedArticle, _impl_.article_)>(
          reinterpret_cast<char*>(&_impl_.article_),
          reinterpret_cast<char*>(&other->_impl_.article_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SerializedArticle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_articles_2eproto_getter, &descriptor_table_articles_2eproto_once,
      file_level_metadata_articles_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace np2ps
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::np2ps::HashWrapper*
Arena::CreateMaybeMessage< ::np2ps::HashWrapper >(Arena* arena) {
  return Arena::CreateMessageInternal< ::np2ps::HashWrapper >(arena);
}
template<> PROTOBUF_NOINLINE ::np2ps::Margin*
Arena::CreateMaybeMessage< ::np2ps::Margin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::np2ps::Margin >(arena);
}
template<> PROTOBUF_NOINLINE ::np2ps::Margins*
Arena::CreateMaybeMessage< ::np2ps::Margins >(Arena* arena) {
  return Arena::CreateMessageInternal< ::np2ps::Margins >(arena);
}
template<> PROTOBUF_NOINLINE ::np2ps::Article_ParagraphHashesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::np2ps::Article_ParagraphHashesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::np2ps::Article_ParagraphHashesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::np2ps::Article_MarginsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::np2ps::Article_MarginsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::np2ps::Article_MarginsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::np2ps::Article*
Arena::CreateMaybeMessage< ::np2ps::Article >(Arena* arena) {
  return Arena::CreateMessageInternal< ::np2ps::Article >(arena);
}
template<> PROTOBUF_NOINLINE ::np2ps::SerializedArticle*
Arena::CreateMaybeMessage< ::np2ps::SerializedArticle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::np2ps::SerializedArticle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
