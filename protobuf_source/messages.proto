syntax = "proto3";

package np2ps;
import "articles.proto";
import "newspaper_entry.proto";

enum MessageType {
	EMPTY = 0;                // done
	ARTICLE_ALL = 10;         // done
	ARTICLE_HEADER = 20;      // done
	ARTICLE_SOLICITATION = 21;
	ARTICLE_LIST = 25;        // done
	USER_IS_MEMBER = 30;      // done
	ARTICLE_DATA_UPDATE = 40; // done
	UPDATE_MARGIN = 70;  // done
	UPDATE_ARTICLE = 90; // done
	CREDENTIALS = 100;   // done
	SYMMETRIC_KEY = 110; // done
	PUBLIC_KEY = 120;   //done
	NEWSPAPER_ENTRY = 130;
}

enum MessageContext {
	ERROR = 0;
	REQUEST = 10;
	RESPONSE = 20;
	ONE_WAY = 30;
}

enum MarginAction {
	REMOVE = 0;
	ADD = 10;
	UPDATE = 20;
}

enum ArticleAction {
	DOWNLOAD = 0;
	REMOVAL = 10;
}

message Message {
	uint64 from = 1;
	uint64 to = 2;
	uint64 seq = 5;
	MessageType msg_type = 3;
	MessageContext msg_ctx = 4;
	oneof message_oneof {
		ArticleAll article_all = 110;
		ArticleHeader article_header = 120;
		ArticleSolicitation article_sol = 121;
		ArticleList article_list = 125;
		UserIsMember user_is_member = 130;
		ArticleDataUpdate article_data_update = 140;
		// handshake here
		UpdateMargin update_margin = 170;
		UpdateArticle update_article = 180;
		Credentials credentials = 200;
		SymmetricKey symmetric_key = 210;
		PublicKey public_key = 220;
		NetworkSerializedNewspaperEntry newspaper_entry = 230;
	}
}

/**
 * ALL following messages are just "extensions"
 * of Message message.
 */
message ArticleAll {
	uint64 article_hash = 1;
	uint32 level = 2;
	// response
	optional Article header = 3;
	optional string article_actual = 4;
}

message ArticleHeader {
	uint64 article_hash = 2;
	// response
	optional Article article = 4;
}

message ArticleList {
	bool all_articles = 1;
	// request
	repeated string categories = 2;
	uint64 newspaper_id = 5;
	int32 count = 4;
	// response
	repeated Article response = 3;
}

message ArticleSolicitation {
	uint64 article_hash = 1;
	repeated uint64 possible_owners = 2;
	optional uint32 level = 3;
}

message UserIsMember {
	uint64 user_pk = 1;
	uint32 level = 2;
	// response
	bool is_member = 3;
}

message ArticleDataUpdate {
	uint64 article_pk = 1;
	ArticleAction article_action = 3;
}

message UpdateMargin {
	uint64 article_pk = 1;
	MarginAction m_action = 2;
	Margins margin = 3;
}

message UpdateArticle { 
	uint64 article_pk = 1; 
}

message Credentials {
	// in request: which fields are requested
	// in response: which fields are filled 
	bool req_ipv4 = 5;
	bool req_ipv6 = 6;
	bool req_rsa_public_key = 7;
	bool req_eax_key = 8;
	// in request: advertising your information
	// in response: response to requested fields
	optional string ipv4 = 1;
	optional string ipv6 = 2;
	optional string rsa_public_key = 3;
	optional string eax_key = 4;
}

message SymmetricKey {
	bytes key = 1;
	bytes signature = 2;
}

message PublicKey {
	bytes key = 1;
}
